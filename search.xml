<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02-Java语言概述</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/02_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>



<h2 id="第一章-Java语言的历史发展"><a href="#第一章-Java语言的历史发展" class="headerlink" title="第一章 Java语言的历史发展"></a>第一章 Java语言的历史发展</h2><span id="more"></span>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">硬件的发展 -- 廉价的单片式微控制器 -- 用于智能化家居</span><br><span class="line"></span><br><span class="line"><span class="number">1991</span>年成立Green小组(詹姆斯·高斯林任组长),专攻计算机在家电领域的嵌入式应用</span><br><span class="line"><span class="number">1992</span>年夏Oak开发功能(根据C++语言改造),Oak开发成功之后需要硬件厂家支持,但是硬件厂家没同意(因为Oak没人用)Oak直接凉了</span><br><span class="line"><span class="number">1995</span>年互联网蓬勃发展,那时候需要一种语言可以在网络上传输,并且给页面增加动态效果,Green小组成员发现Oak可以完成这样的要求,并且当初设计的时候这门语言也比较小适合在网络上传输,所以对Oak语言一顿修改,重命名为<span class="keyword">Java,并且在Sun </span>World大会上亮相被认可(IBM,微软,HP..)</span><br><span class="line"><span class="number">1996</span>年<span class="number">1</span>月 Sun公司发布了<span class="keyword">Java的第一个开发工具包（JDK1.0）</span></span><br><span class="line"><span class="keyword"></span><span class="number">1997</span>年<span class="number">2</span>月 <span class="keyword">JDK1.1</span></span><br><span class="line"><span class="keyword"></span><span class="number">1999</span>年<span class="number">6</span>月 <span class="keyword">JDK1.2</span></span><br><span class="line"><span class="keyword"></span>	<span class="keyword">J2ME（Java2 </span>Micro Edition <span class="keyword">Java2平台的微型版）应用于嵌入式、无线领域</span></span><br><span class="line"><span class="keyword"></span>	<span class="keyword">J2SE（Java2 </span>Standard Edition <span class="keyword">Java2平台的标准版）应用于桌面环境,现在已经被Android应用和IOS应用取代</span></span><br><span class="line"><span class="keyword"></span>	<span class="keyword">J2EE（Java </span><span class="number">2</span>Enterprise Edition <span class="keyword">Java </span><span class="number">2</span>平台的企业版）应用于基于<span class="keyword">Java的应用服务器,以后的学习方向</span></span><br><span class="line"><span class="keyword"></span><span class="number">2000</span>年<span class="number">5</span>月 <span class="keyword">JDK1.3、JDK1.4</span></span><br><span class="line"><span class="keyword"></span><span class="number">2004</span>年<span class="number">9</span>月 <span class="keyword">JDK5(从原来的1.x版本编程了x版本) </span>里程碑版本,增加了很多实用功能</span><br><span class="line"><span class="number">2005</span>年<span class="number">6</span>月 <span class="keyword">JDK6</span></span><br><span class="line"><span class="keyword"></span><span class="number">2009</span>年    甲骨文(<span class="keyword">Oracle)公司宣布收购Sun</span></span><br><span class="line"><span class="keyword"></span><span class="number">2011</span>年    <span class="keyword">JDK7</span></span><br><span class="line"><span class="keyword"></span><span class="number">2014</span>年    <span class="keyword">JDK8(JDK8版本开始部分收费 </span><span class="keyword">JDK8u211及以上版本开始收费,以下版本依然免费) </span>当前国内使用的版本</span><br><span class="line"><span class="number">2017</span>年<span class="number">9</span>月 <span class="keyword">JDK9 </span>收费</span><br><span class="line"><span class="number">2018</span>年<span class="number">3</span>月 <span class="keyword">JDK10 </span>收费</span><br><span class="line">...</span><br><span class="line">当前(<span class="number">2021</span>年) <span class="keyword">JDK16 </span>收费</span><br><span class="line">...</span><br><span class="line">当前(<span class="number">2021</span>年) <span class="keyword">JDK17 </span>免费</span><br></pre></td></tr></table></figure>

<h2 id="第二章-Java语言的优势"><a href="#第二章-Java语言的优势" class="headerlink" title="第二章 Java语言的优势"></a>第二章 Java语言的优势</h2><h3 id="第1节-Java语言应用"><a href="#第1节-Java语言应用" class="headerlink" title="第1节 Java语言应用"></a>第1节 Java语言应用</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Java语言的职业方向</span></span><br><span class="line"><span class="keyword"></span><span class="number">1</span>. <span class="keyword">Android系统应用早期是用Java语言开发的,当然现在也可以使用,不过现在有替代语言Kotlin</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>. 很多大数据相关框架都是使用<span class="keyword">Java语言开发的,比如hadoop，Hbase，Elasticsearch等</span></span><br><span class="line"><span class="keyword"></span><span class="number">3</span>. 在应用领域很多软件的后台服务都是基于<span class="keyword">Java开发</span></span><br><span class="line"><span class="keyword"></span>	<span class="number">3</span>.<span class="number">1</span> 电商领域(淘宝、京东...)</span><br><span class="line">	<span class="number">3</span>.<span class="number">2</span> 金融领域(支付宝、银行...)</span><br><span class="line">	<span class="number">3</span>.<span class="number">3</span> 软件工具(Eclipse...)</span><br><span class="line">	<span class="number">3</span>.<span class="number">4</span> 国内的各个领域(政府、金融、保险、医疗、教育...)<span class="keyword">Java占着举足轻重的地位</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">打开我们的手机,里面的APP软件大部分后台都是<span class="keyword">Java语言编写的.</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-Java语言特点"><a href="#第2节-Java语言特点" class="headerlink" title="第2节 Java语言特点"></a>第2节 Java语言特点</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 简单性</span><br><span class="line"><span class="bullet">2.</span> 面向对象</span><br><span class="line"><span class="bullet">3.</span> 分布性</span><br><span class="line"><span class="bullet">4.</span> 健壮性</span><br><span class="line"><span class="bullet">5.</span> 安全性</span><br><span class="line"><span class="bullet">6.</span> 跨平台</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="第三章-Java语言的环境搭建"><a href="#第三章-Java语言的环境搭建" class="headerlink" title="第三章 Java语言的环境搭建"></a>第三章 Java语言的环境搭建</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Java官方提供了Java语言的开发工具包叫JDK,所以我们只需要去官网下载官方提供的JDK开发工具集即可进行Java语言开发</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">JDK</span><span class="params">(Java Development Kit)</span><span class="title">Java</span></span>开发工具包,工具包中包含了开发Java语言的各种工具以及运行Java软件的环境等</span><br></pre></td></tr></table></figure>

<img width="450" align="center" src="https://note.youdao.com/yws/api/personal/file/WEBdaa9087635d58b139be4d6b7a2dfeaf9?method=download&shareKey=73a434c86ec63645b819d2efc01ae39c">

<ul>
<li>下载地址</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/downloads/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">傻瓜式安装</span><br><span class="line">注意: 安装路径不能有中文,不能有空格,不需要额外安装<span class="built_in">jre</span>(Java运行时环境)</span><br></pre></td></tr></table></figure>

<ul>
<li>安装目录介绍</li>
</ul>
<img width="600" alitn="center" src="https://note.youdao.com/yws/api/personal/file/WEB46e65b155fd784526a889d04673cf545?method=download&shareKey=9c57ce9c71cabbbfb0ad318b8d164027">

<ul>
<li>环境变量配置</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 设置变量 JAV<span class="built_in">A_HOME</span>=JDK安装路径,精确到bin目录的上一级</span><br><span class="line"><span class="number">2</span>. 将JAV<span class="built_in">A_HOME</span>添加到Path路径下 <span class="variable">%JAVA_HOME%</span>\bin<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="title">注意:</span></span><br><span class="line"><span class="number">1</span>. JAV<span class="built_in">A_HOME</span> 必须全部大写</span><br><span class="line"><span class="number">2</span>. JAV<span class="built_in">A_HOME</span> 两个单词中间是下划线而非减号</span><br><span class="line"><span class="number">3</span>. <span class="variable">%XXX%</span> 百分号是windows系统中取变量值的一种语法 </span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">在DOS命令行窗口中执行 java -<span class="built_in">version</span> 命令. 如果打印出jdk的版本,说明安装成功.</span><br></pre></td></tr></table></figure>

<h2 id="第四章-第一个Java软件"><a href="#第四章-第一个Java软件" class="headerlink" title="第四章 第一个Java软件"></a>第四章 第一个Java软件</h2><ul>
<li>软件开发工具介绍</li>
</ul>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">Windows自带的文本文档</span><br><span class="line">notepad++ (后改名为 notepad-plus)</span><br><span class="line">Eclipse</span><br><span class="line">IntelliJ IDEA</span><br><span class="line"><span class="meta prompt_">...</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写第一个Java软件的注意事项</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 创建一个文本文件,文件的格式以.java结尾</span><br><span class="line"><span class="attribute">2</span>. 文件的名字理论上可以随意命名,但是这里强调不能使用中文,只能使用 <span class="number">0</span>-<span class="number">9</span>、a-z、A-Z、_、$ 不能使用其他</span><br><span class="line"><span class="attribute">3</span>. 文件名字不能以数字开头</span><br><span class="line"><span class="attribute">4</span>. 在起文件名字时,英文单词的首字母必须大写,多英文单词的时候首字母也一定要大写 eg: XxxYyyZzz</span><br></pre></td></tr></table></figure>

<ul>
<li>代码编写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第五章-Java软件的运行流程"><a href="#第五章-Java软件的运行流程" class="headerlink" title="第五章 Java软件的运行流程"></a>第五章 Java软件的运行流程</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 首先<span class="keyword">Java语言是高级语言,高级语言编写的代码是不能直接被计算机解析和运行的(计算机只认识0和1)</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>. 所以首先就是对我们编写的代码进行处理(编译),处理成可以被计算机认识的形式</span><br><span class="line"><span class="number">3</span>. 编译 <span class="keyword">javac </span>XxxYyyZzz.<span class="keyword">java </span>将.<span class="keyword">java的源文件编译成XxxYyyZzz.class字节码文件</span></span><br><span class="line"><span class="keyword"></span><span class="number">4</span>. 运行 <span class="keyword">java </span>XxxYyyZzz  -- 将其加载到<span class="keyword">JVM虚拟机的内存中由CPU解析和运行</span></span><br></pre></td></tr></table></figure>

<img width="700" align="center" src="https://note.youdao.com/yws/api/personal/file/WEB4cf28e123fcaf24959991d947af085f6?method=download&shareKey=9a37def37a7dbd7751c14799b6abd74c">



<h2 id="第六章-Java的注释"><a href="#第六章-Java的注释" class="headerlink" title="第六章 Java的注释"></a>第六章 Java的注释</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>单行注释</span><br><span class="line">/* </span><br><span class="line"> * 多行注释</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 文档型注释<span class="regexp">/多行注释/</span>Java语言独有的</span><br><span class="line"> */</span><br><span class="line">jdk提供了对文档注释的操作使用javadoc命令可以生成java文档</span><br><span class="line">eg: </span><br><span class="line">javadoc  -d C:\Users\Administrator\Desktop\d  -encoding utf-<span class="number">8</span>  HelloWorld.java</span><br></pre></td></tr></table></figure>

<h2 id="第七章-软件的运行流程"><a href="#第七章-软件的运行流程" class="headerlink" title="第七章 软件的运行流程"></a>第七章 软件的运行流程</h2><ul>
<li>计算机软件的运行流程</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">比如在你的D盘安装了一个QQ</span><br><span class="line">鼠标双击QQ运行这个QQ软件 <span class="comment">-- 将硬盘里面的QQ软件加载到内存中</span></span><br><span class="line">加到到内存之后CPU开始读取内存中QQ软件的每一行代码</span><br></pre></td></tr></table></figure>

<ul>
<li>Java软件的运行流程</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">以HelloWorld.<span class="keyword">java为例</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">使用<span class="keyword">java命令运行.class字节码文件时</span></span><br><span class="line"><span class="keyword"></span>使用<span class="keyword">java命令执行.class字节码文件 </span> --  将字节码文件通过<span class="keyword">JVM加载到内存中</span></span><br><span class="line"><span class="keyword"></span>加载到内存中之后CPU开始一行行进行<span class="keyword">Java代码的解析</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">这就是<span class="keyword">Java软件运行的流程,其实所有的计算机软件运行流程都是一样的...</span></span><br></pre></td></tr></table></figure>

<img width="600" align="center" src="https://note.youdao.com/yws/api/personal/file/WEB83ebdb444e5faa547b63fed8e4082a4c?method=download&shareKey=259472074d1ff521df8cf13fe510fc6c"> 
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>02-Java语言概述</category>
      </categories>
      <tags>
        <tag>java历史</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown文档创建与使用(Typora)</title>
    <url>/2022/07/27/%E5%89%8D%E8%A8%80%EF%BC%9A/Markdown%E6%96%87%E6%A1%A3%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8(Typora)/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h1 id="Markdown文档创建与使用-Typora"><a href="#Markdown文档创建与使用-Typora" class="headerlink" title="Markdown文档创建与使用(Typora)"></a>Markdown文档创建与使用(Typora)</h1><p>[TOC]</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​		作为一个程序员，Markdown就像是情人一样。world文本虽美依旧敌不过情人的魅力。Markdown文档格式为.md文件。Markdown也是一种标记语言。该类型文件可使用普通编辑器打开或者编辑，例如：<a href="https://notepad-plus-plus.org/">记事本</a>，<a href="https://so.csdn.net/so/search?q=EditPlus&spm=1001.2101.3001.7020">EditPlus</a>，<a href="http://www.sublimetext.com/">sublime</a>等等，当然了，也有更专业的编辑器，例如我现在正在使用的——Typora。</p>
<p><a href="https://typoraio.cn/">Typora</a> <a href="https://typoraio.cn/">https://typoraio.cn/</a></p>
<h2 id="md文件的书写格式"><a href="#md文件的书写格式" class="headerlink" title="md文件的书写格式"></a>md文件的书写格式</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote>
<p>#一级标题</p>
<p>##二级标题</p>
<p>###三级标题</p>
<p>####四级标题</p>
<p>#####五级标题</p>
<p>######六级标题</p>
</blockquote>
<p>快捷键：Ctrl+1~6</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>有序列表</li>
</ul>
<blockquote>
<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
</blockquote>
<p>输入“1.+空格”  后面输入内容换行</p>
<ul>
<li>无序列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 无序列表</span><br><span class="line"><span class="bullet">+</span> 无序列表</span><br><span class="line"><span class="bullet">-</span> 无序列表</span><br></pre></td></tr></table></figure>

<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+空格</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是引用文本段</p>
</blockquote>
<p>换行后 shift+tab 可以快速退出引用。</p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">***</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="emphasis">___</span> 三个连续的* 或- 或_</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">url</span>描述](<span class="built_in">url</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://notepad-plus-plus.org/">记事本</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(图片url)</span><br></pre></td></tr></table></figure>

<p><img src="/../../imgae/Markdown%E6%96%87%E6%A1%A3%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8(Typora)/image-20220730130917194.png"></p>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​~~~+换行    #表示代码框，可以在换行前声明代码语言 </span><br><span class="line">```+换行</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="强调作用"><a href="#强调作用" class="headerlink" title="强调作用"></a>强调作用</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">**字体加粗**</span></span><br><span class="line"><span class="emphasis">__字体加粗__</span></span><br><span class="line"><span class="strong">*倾斜*</span></span><br><span class="line"><span class="emphasis">_倾斜_</span></span><br><span class="line">~~删除~~</span><br></pre></td></tr></table></figure>

<p><strong>字体加粗</strong><br><strong>字体加粗</strong><br><em>倾斜</em><br><em>倾斜</em><br><del>删除</del></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">插入两行两列的表格</span><br><span class="line">|<span class="string">      </span>|<span class="string">      </span>|</span><br><span class="line">|<span class="string"> ---- </span>|<span class="string"> ---- </span>|</span><br><span class="line">|<span class="string">      </span>|<span class="string">      </span>|</span><br><span class="line">建议使用Typora右键插入</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="right"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="right"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="number">999</span>+iiii</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>


<p>$$<br>999999+iiii<br>$$</p>
<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[] +空格 </span><br></pre></td></tr></table></figure>

<ul>
<li><p><input disabled="" type="checkbox"> </p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> </p>
</li>
</ul>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">TOC</span>] <span class="meta">#自动生成文档目录</span></span><br></pre></td></tr></table></figure>

<h3 id="语义化标签-md支持使用html标签"><a href="#语义化标签-md支持使用html标签" class="headerlink" title="语义化标签(md支持使用html标签)"></a>语义化标签(md支持使用html标签)</h3><div><font color=red>使用语义化标签书写hexo，会影响hexo整个页面慎用</font></div>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> 标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span> 标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span> 标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1> 标题1</h1>
<h2> 标题2</h2>
<h3> 标题3</h3>
<h4> 标题4</h4>
<h5> 标题5</h5>
<h6> 标题6</h6>

<blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>标签</th>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><h1>-<h6></td>
<td>标题</td>
<td>通常用来划分或标注内容中的文本段落</td>
</tr>
<tr>
<td>2</td>
<td><header></td>
<td>页眉</td>
<td>一般是有导航，logo等元素组成</td>
</tr>
<tr>
<td>3</td>
<td><footer></td>
<td>页脚</td>
<td>一般是由友情链接，联系方式，备案号，版权等纤细组成</td>
</tr>
<tr>
<td>4</td>
<td><nav></td>
<td>导航</td>
<td>导航通常是由一个或者多个链接标签<a>标签组成</td>
</tr>
<tr>
<td>5</td>
<td><main></td>
<td>主体</td>
<td>展示页面主体内容，建议一个页面只出现一次</td>
</tr>
<tr>
<td>6</td>
<td><article></td>
<td>文档</td>
<td>本义是文档，实际上可以充当其他内容的容器</td>
</tr>
<tr>
<td>7</td>
<td><aside></td>
<td>边栏</td>
<td>与主体无关的信息（广告位，相关推荐，阅读排行等）</td>
</tr>
<tr>
<td>8</td>
<td><section></td>
<td>区块</td>
<td>文档或主体中的通用小组件</td>
</tr>
<tr>
<td>9</td>
<td><div></td>
<td>容器</td>
<td>本身无任何语义，通过它的属性来描述用途</td>
</tr>
</tbody></table>
</blockquote>
]]></content>
      <categories>
        <category>前言</category>
        <category>Markdown文档创建与使用(Typora)</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>git版本控制工具</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%89%EF%BC%9A/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h1 id="Git常见命令速查表"><a href="#Git常见命令速查表" class="headerlink" title="Git常见命令速查表"></a>Git常见命令速查表</h1><h2 id="git客户端的安装和配置"><a href="#git客户端的安装和配置" class="headerlink" title="git客户端的安装和配置"></a>git客户端的安装和配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">产看本地配置信息</span><br><span class="line">git config --global -l</span><br><span class="line">git config --global --list</span><br><span class="line">用户名和邮箱设置</span><br><span class="line">//仅对当前仓库有效</span><br><span class="line">git config --local user.name &quot;Your Name&quot;</span><br><span class="line">git config --local user.email &quot;email@example.com&quot;</span><br><span class="line">//对当前用户的所有仓库有效</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>



<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt;  #克隆远程版本库</span><br><span class="line">git init   # 初始化本地版本库</span><br></pre></td></tr></table></figure>

<h2 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status  #查看状态</span><br><span class="line">git diff    #查看变更内容</span><br><span class="line">git add .   #跟踪所有改动过的文件（将改动过的文件提交到暂存区）</span><br><span class="line">git mv &lt;old&gt; &lt;new&gt; #文件改名</span><br><span class="line">git rm &lt;file&gt; #删除文件  git commit -m &quot;&quot; 完成删除</span><br><span class="line">	git checkout --abc.txt #错误删除文件恢复（其实是用版本库里的版本替换工作区的版本）</span><br><span class="line">git rm --cached &lt;file&gt; # 停止跟踪文件但不删除</span><br><span class="line">git commit -m &quot;commit message&quot; #提交所有更新过的文件</span><br><span class="line">git commit --amend		#修改最后一次提交</span><br></pre></td></tr></table></figure>

<h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log  #查看提交历史</span><br><span class="line">git log --pretty=oneline  #精简信息查询:</span><br><span class="line">git log -p  &lt;file&gt;  #查看指定文件的提交历史</span><br><span class="line">git blame &lt;file&gt;    #以列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>

<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD  #撤销工作目录中所有未提交文件的修改内容</span><br><span class="line">    回退到上一个版本 git reset --hard HEAD^ </span><br><span class="line">    回退到上上一个版本 git reset --hard HEAD^^ </span><br><span class="line">    回退到上100个版本 git reset --hard HEAD~100</span><br><span class="line">git checkout HEAD &lt;file&gt; #取消对文件内容的修改（让这个文件回到最近一次git commit或git add时的状态）</span><br><span class="line">git revert &lt;commmit&gt; #撤销指定的提交</span><br><span class="line">git reset --hard a1faca5  #切换到固定版本号</span><br><span class="line">git reflog  #查看历史操作 （回退后第二天后悔，查询不到版本号可使用）</span><br></pre></td></tr></table></figure>

<h2 id="分支-branch-与标签-tag"><a href="#分支-branch-与标签-tag" class="headerlink" title="分支(branch)与标签(tag)"></a>分支(branch)与标签(tag)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch     #显示所有本地分支</span><br><span class="line">git checkout &lt;branch/tag&gt;   #切换到指定分支或标签</span><br><span class="line">git branch &lt;new-branch&gt;		#创建新的分支</span><br><span class="line">git branch -d &lt;branch&gt;    #删除本地分支</span><br><span class="line">git tag					#列出所有本地标签</span><br><span class="line">git tag &lt;tagname&gt;       #基于最新提交创建标签</span><br><span class="line">git tag -d &lt;tagname&gt;    #删除标签</span><br></pre></td></tr></table></figure>

<h2 id="合并和衍合"><a href="#合并和衍合" class="headerlink" title="合并和衍合"></a>合并和衍合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;  #合并指定分支到当前分支</span><br><span class="line">git rebase &lt;branch&gt; #衍合指定分支到当前分支</span><br></pre></td></tr></table></figure>

<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote&gt; &lt;url&gt;  #添加远程版本库</span><br><span class="line">git remote -v #查看远程版本库信息</span><br><span class="line">git remote show  &lt;remote&gt; #查看指定远程版本 库信息</span><br><span class="line">git fetch &lt;remote&gt;  #从远程库获取代码</span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;  #下载代码及快速合并</span><br><span class="line">git push &lt;remote&gt;  &lt;branch&gt; #上传代码及快速合并</span><br><span class="line">git push &lt;remote&gt; :&lt;branch/tag-name&gt; #删除远程分支或标签</span><br><span class="line">git push --tags  #上传所有标签</span><br></pre></td></tr></table></figure>

<h2 id="Git的远程仓库"><a href="#Git的远程仓库" class="headerlink" title="Git的远程仓库"></a>Git的远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;          #生成密钥  （C:\Users\Administrator\.ssh 目录下，里面有公匙和私匙）</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段三：JavaWeb</category>
        <category>git版本控制工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客搭建</title>
    <url>/2022/07/27/%E5%89%8D%E8%A8%80%EF%BC%9A/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h1 id="Hexo个人博客搭建"><a href="#Hexo个人博客搭建" class="headerlink" title="Hexo个人博客搭建"></a>Hexo个人博客搭建</h1><p>官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli #全局安装hexo</span><br><span class="line">npm install hexo #当前包下安装</span><br><span class="line">hexo -v #查看hexo版本</span><br><span class="line">hexo init &lt;folder&gt;  #本地构建hexo网站包,folder文件夹</span><br><span class="line">cd &lt;folder&gt;  #切换到folder文件夹下</span><br><span class="line">hexo clean #清空本地的构建文件</span><br><span class="line">hexo g #构建博客网页（将md文件转换成静态html）</span><br><span class="line">hexo s #本地运行</span><br><span class="line">npm install hexo-deployer-git --save #安装 hexo-deployer-git。</span><br><span class="line">hexo d #部署到远端</span><br><span class="line">#使用以上命令就可以完成个人博客的创建啦，想要好看就需要自己设置主题</span><br></pre></td></tr></table></figure>

<p>部署完成后一定要新建一个分支，保存博客源代码文件。方便下次写完博客后重新更新博客信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#从远端分支拉取博客源代码后,在博客文件夹下是无法执行 hexo指令的，这个时候不要怀疑是你环境变量的问题。这是因为mode_modules 这个文件夹在上传git时候被 .gitignore这个忽略文件忽略了。</span><br><span class="line">#在文件夹下执行</span><br><span class="line">npm install </span><br><span class="line">#node.js 会自动根据package.json文件下载所需的node_modules项目文件</span><br><span class="line">#这个时候你会发现，博客文件夹下又可以执行hexo 指令了。</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p>
<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看node.js和git是否安装成功</span><br><span class="line">node -v  #检查node版本 </span><br><span class="line">git -v   #检查git版本</span><br></pre></td></tr></table></figure>



<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;-g 全局安装&#x3D;&#x3D; </p>
<h4 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h4><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure>

<p>安装以后，可以使用以下两种方式执行 Hexo：</p>
<ol>
<li><code>npx hexo &lt;command&gt;</code></li>
<li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</li>
</ol>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml  #全局的配置文件信息</span><br><span class="line">├── package.json #应用程序的信息,node.js需要使用</span><br><span class="line">├── scaffolds #模板文件夹</span><br><span class="line">├── source  #资源文件夹，用于存放用户资源</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts #除此文件夹外其他的开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span><br><span class="line">└── themes  #主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>url</code></td>
<td align="left">网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>root</code></td>
<td align="left">网站根目录</td>
<td align="left"><code>url&#39;s pathname</code></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td>
<td align="left"><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td align="left"><code>permalink_defaults</code></td>
<td align="left">永久链接中各部分的默认值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls</code></td>
<td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_index</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_html</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td>
<td align="left"><code>true</code></td>
</tr>
</tbody></table>
<blockquote>
<p>网站存放在子目录</p>
<p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 比如，一个页面的永久链接是 http:<span class="comment">//example.com/foo/bar/index.html</span></span></span><br><span class="line"><span class="symbol">pretty_urls:</span></span><br><span class="line"><span class="symbol">  trailing_index:</span> false</span><br><span class="line"><span class="meta"># 此时页面的永久链接会变为 http:<span class="comment">//example.com/foo/bar/</span></span></span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>github 或者gitee创建项目库</p>
<p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure>

<p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">heroku</span></span><br><span class="line">  <span class="attr">repo:</span></span><br></pre></td></tr></table></figure>

<p>在blog文件夹下_config.yml中进行配置</p>
<p><img src="/../../imgae/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5424F61.PNG"></p>
<p>创建新的分支 例如：hexo 将项目代码保存到新的分支中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init  # 创建本地版本库</span><br></pre></td></tr></table></figure>

<p>修改.git文件夹下config文件</p>
<p><img src="/../../imgae/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/C1215F1.PNG"></p>
]]></content>
      <categories>
        <category>前言</category>
        <category>Hexo个人博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next主题</tag>
        <tag>gitee部署</tag>
        <tag>github部署</tag>
      </tags>
  </entry>
  <entry>
    <title>01-计算机和计算机语言</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>


<h2 id="第一章-计算机概述"><a href="#第一章-计算机概述" class="headerlink" title="第一章 计算机概述"></a>第一章 计算机概述</h2><h3 id="第1节-计算机介绍"><a href="#第1节-计算机介绍" class="headerlink" title="第1节 计算机介绍"></a>第1节 计算机介绍</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">广义上: 凡是可以帮助我们完成计算的工具统称为计算机<span class="comment">(比如 算盘、计算器等...)</span></span><br><span class="line">狭义上: 当前说计算机一般情况特指电子计算机<span class="comment">(电脑)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="第2节-计算机历史"><a href="#第2节-计算机历史" class="headerlink" title="第2节 计算机历史"></a>第2节 计算机历史</h3><table>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>算盘(机械/手动)</h4>
            <p>源于中国具体作者不详,发明时间不详.我国第一颗原子弹的很多数据早期都是用算盘计算出来的在这里致敬我们老一辈的科学家</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEB139554371b5f87ce2656322460ec20b5?method=download&shareKey=1c6b681e66c46f64a3563cdd1e9ef469">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>步进计算器(机械/手动)</h4>
            <p>1694年由德国数学家[戈特弗里德·布莱尼茨]发明的</p>
            <p>当前模型存在于德意志博物馆中</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEBa436f9075de4aa82c1e4918b9c17b522?method=download&shareKey=9b7208f87f0383ba2a4a2da25ed729cd">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>差分机(机械/手动)</h4>
            <p>1822年由英国数学家[查尔斯·巴贝奇]历时10年从设计到加工都是由自己一个人完成,计算精度达到6位小数</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEB45cb8cca5eea345866040d756d5caafe?method=download&shareKey=c69eaf5e139e38f678c790780bc8922a">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>分析机(机械/自动[蒸汽机])</h4>
            <p>
                1830年由英国数学家[查尔斯·巴贝奇]发明的这台机器可以进行相当复杂的计算计算精度达到31位小数,由于设计超前,没有被广泛使用分析机在设计上采用蒸汽机作为动力驱动,使用穿孔纸带(计算机语言前身)作为数据输入,算是世界上第一台真正意义上的计算机.后人称巴贝尔为计算机之父英国数学家奥古斯塔·阿达·金(勒芙蕾丝伯爵夫人),却认为分析机的设计很好,并且为分析机写了一个算法,所以勒芙蕾丝伯爵夫人被视为第一个给计算机写程序的人(世界上的第一位程序员)
            </p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEBccb3fd5939ebaa08b2bddea3d16984db?method=download&shareKey=cff9bcad93dfba97677f576c2b0994ca">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>打孔计数器(机械/电动)</h4>
            <p>1880-1890年由美国人[赫尔曼·霍尔瑞斯]发明的.在1890年打孔计数器用于美国的人口普查中.打孔计数器在美国人口普查上获得了巨大的成功,引得世界上很多的公司争相购买,为了应对需求 霍尔瑞斯成立制表机器公司(CTR),这是IBM的前身</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEB2afb1b99b9de736df9132cb2d1088419?method=download&shareKey=90d477ba0b1ac73f50d2149dadadcd19">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>电子计算机</h4>
            <p>1. 第一代电子管计算机 1946年 电子管体积大,耗电多,运行速度慢,性能不稳定</p>
            <p>2. 第二代晶体管计算机 1956年 晶体管代替电子管,体积小,耗能低,速度快,稳定</p>
            <p>3. 第三代集成电路计算机 1958年 集成电路，计算机变得更小，功耗更低，速度更快,1964年，美国IBM公司研制成功第一个采用集成电路的通用电子计算机系列IBM360</p>
            <p>4. 第四代大规模集成电路计算机</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEBb25b14034e52b0476e0ab33308bece0d?method=download&shareKey=932bd14e81be5b47c0586a6e6de06449">
        </td>
    </tr>
</table>


<h3 id="第3节-计算机组成"><a href="#第3节-计算机组成" class="headerlink" title="第3节 计算机组成"></a>第3节 计算机组成</h3><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">计算机组成</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">硬件</span><span class="punctuation">:</span> <span class="string">主板、硬盘、CPU、显卡、显示器、鼠标、键盘...</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">软件</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">系统软件</span><span class="punctuation">:</span> <span class="string">Windows、Linux、Mac、Android、ios...</span></span><br><span class="line">    <span class="attribute">应用软件</span><span class="punctuation">:</span> <span class="string">QQ 微信 王者荣耀 英雄联盟 ...</span></span><br></pre></td></tr></table></figure>

<h2 id="第二章-计算机语言概述"><a href="#第二章-计算机语言概述" class="headerlink" title="第二章 计算机语言概述"></a>第二章 计算机语言概述</h2><h3 id="第1节-自然语言和计算机语言"><a href="#第1节-自然语言和计算机语言" class="headerlink" title="第1节 自然语言和计算机语言"></a>第1节 自然语言和计算机语言</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">自然语言  : 人与人沟通的语言叫做自然语言; 比如: 汉语、英语、韩语</span><span class="string">.</span><span class="string">.</span><span class="string">.</span></span><br><span class="line"><span class="comment">计算机语言: 人与计算机沟通的语言叫做计算机语言; 比如: C/C</span><span class="literal">++</span><span class="comment">、Java、Python</span><span class="string">.</span><span class="string">.</span><span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">计算机语言也叫做语言</span><span class="string">,</span><span class="comment">被人类划分到语言的行列说明它和我们人类的自然语言有很多相似之处</span><span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">自然语言和计算机语言学习步骤:</span></span><br><span class="line"><span class="comment">	自然语言(英语)  : 单词</span>         <span class="literal">--</span> <span class="comment">语法</span> <span class="literal">--</span> <span class="comment">与外国人交流</span></span><br><span class="line"><span class="comment">	计算机语言(Java): 关键字(单词)</span> <span class="literal">--</span> <span class="comment">语法</span> <span class="literal">--</span> <span class="comment">与计算机交流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">计算机语言学习起来更简单</span><span class="string">,</span><span class="comment">因为计算机语言没有英语那么多单词</span><span class="string">,</span><span class="comment">只需要记住常见的几十个</span><span class="string">,</span><span class="comment">常用的十几二十个即可</span><span class="string">.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="第2节-计算机语言由来"><a href="#第2节-计算机语言由来" class="headerlink" title="第2节 计算机语言由来"></a>第2节 计算机语言由来</h3><table>
    <tr>
        <td style="font-size:10px;width:45%;">
            <p>1800到1804年法国人约瑟夫·玛丽·雅卡尔在改进前人提花机基础之上,发明了用穿孔卡带来记录提花机顶针抬起和放下,从而控制钩子的选线是走在布的上面还是下面.通过在卡纸上打孔来记录每一种花样的顶针走势</p>
            <hr>
            <p><strong style="color:red;">纸卡</strong>可以看成是<strong style="color:blue;">计算机存储</strong> -- <strong style="color:green;">纸卡上面的孔</strong>就是最早期的<strong style="color:pink;">计算机语言</strong></p>
            <h4>雅卡尔提花机演示</h4>
            <iframe src="//player.bilibili.com/player.html?aid=969922335&bvid=BV1hp4y1Y7y5&cid=246572512&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
            <h4>视频地址:</h4>
            <code>https://www.bilibili.com/video/BV1hp4y1Y7y5?share_source=copy_web</code>
        </td>
        <td style="width:55%;text-align:center;">
            <img src="https://note.youdao.com/yws/api/personal/file/WEB54f36f5447fc3c1d63d87cabeeb37ea1?method=download&shareKey=592534697e52c649f1c6cbc8cef4480c">
        </td>
    </tr>
</table>


<h3 id="第3节-计算机存储器发展"><a href="#第3节-计算机存储器发展" class="headerlink" title="第3节 计算机存储器发展"></a>第3节 计算机存储器发展</h3><h4 id="3-1-存储器的由来"><a href="#3-1-存储器的由来" class="headerlink" title="3.1 存储器的由来"></a>3.1 存储器的由来</h4><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">在说存储(类似于计算机硬盘,U盘等)之前首先需要了解一下机器的软硬件之间的关系.很多时候我们在聊软硬件的时候首先就会想到电脑,手机这些现代化的电子设备.</span><br><span class="line">其实软件和硬件的出现比现代化的电子计算机出现的更早,只是那时候不叫软件和硬件而已.这里就以雅卡尔提花机为例说一下软件和硬件.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 传统提花机,没有软件只有硬件,生产一种相同花样的布都需要通过靠织布者的记忆来完成,可能会造成各个批次布的花样不相同,因为人不可能完全记住每一个花样的每一次走线.造成了布匹与布匹之间样式的差异化.</span><br><span class="line"><span class="number">2</span>. 在第一匹布完成之后,第二匹布需要和第一匹布一模一样的样式,第三匹布需要和第一匹布一模一样的样式,这种重复的提花怎么解决呢？</span><br><span class="line"><span class="number">3</span>. 雅卡尔提花机的出现解决了上面的问题.这时算是软件在机器中的最早使用.使用穿孔卡片记录下提花机顶针的走线方式.</span><br><span class="line"><span class="number">4</span>. 穿孔卡片不算是软件,他属于提花机的一部分,属于硬件,我们可以叫他存储器,上面的孔才是软件,这些孔存储在纸卡上,只是当时的存储器不可擦除,不能重复存储.</span><br><span class="line"></span><br><span class="line">雅卡尔提花机:</span><br><span class="line"></span><br><span class="line">   硬件                            软件</span><br><span class="line">提花机+纸卡       纸卡上的孔(也可以称之为开关量(开/关)或者叫<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">   干活                        控制硬件怎么干活</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结合现代的存储(固态硬盘),在看当时雅卡尔的存储(纸卡),存储器也经历了翻天覆地的变化.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-存储器的发展"><a href="#3-2-存储器的发展" class="headerlink" title="3.2 存储器的发展"></a>3.2 存储器的发展</h4><table>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>穿孔卡带</h4>
            <p>1830年最早应用在巴贝尔的分析机上.这是最早的计算机软硬件结合.这个纸卡就是最早期的计算机存储器</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEB5f4dfe24e4d9d17be7bb4465dfa204be?method=download&shareKey=b1326d0daed574cdb689724a94299cab">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>电子管存储</h4>
            <p>1946年世界上第一台真正意义上的电子计算机诞生(埃尼阿克,电子管存储就用在这个计算机上),相比于纸带,电子管存储造价昂贵,所以在历史上昙花一现.</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEB7eb88e30e3459ae5eddbc7279fa58968?method=download&shareKey=481f4d3cca91861b8baa0640ec41bf7c">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>磁带</h4>
            <p>1950年IBM最早把盘式磁带用在数据存储上,一卷磁带可以代替1万张打孔纸卡,既便宜还能减少卡带体积,所以马上获取了成功,成为直到80年代最为普及的计算机存储设备.</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEBf2fb95b33eaa280fcaab8f9dd1028103?method=download&shareKey=4c9ebb1c3e005bf862393092520b5407">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>磁鼓</h4>
            <p>	1953年,第一台磁鼓应用于IBM701,磁鼓是利用铝鼓筒表面涂覆的磁性材料来存储数据的.鼓筒旋转速度很高,因此存取速度快</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEB5327a14b0ef235f74cae99323d7fcae2?method=download&shareKey=ac25c1206ab772557a15bce9fcc182a1">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>软盘</h4>
            <p>1969年第一张软盘诞生,当时是一张8英寸的大家伙,可以保存80K的只读数据1973年的时候比他小一号但是容量为256k的软盘诞生,并且是可读写的.一直到90年代末,那时候可以找到3.5英寸250MB的的软盘</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEB7852c3552b2481958348ab1e03cf818a?method=download&shareKey=b54d21fab1d71febcb356ca2ac35ea94">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>硬盘</h4>
            <p>1956年9月13日,IBM发布了305 RAMAC硬盘机,在当时与之匹配的计算机没什么变化,但是存储容量确是革命性的海量存储,在当时高达4.4MB,当时一个硬盘机的重量高达600公斤以上</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEB9f940e972cf40af6d8c567252d99f5c8?method=download&shareKey=6d535472b124989adae8b42b66f75173">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>光盘</h4>
            <p>1958年开始发明光盘技术到1972年第一张光盘问世.1978年才在市场上售卖,在当时光盘是只读的不能写.</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEB0de12ec3d4f7a7003781c7bcec41eb7e?method=download&shareKey=50f810bd3db30ef76b06e341da6d7624">
        </td>
    </tr>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>固态硬盘</h4>
            <p>1989年世界上第一款固态硬盘由IBM推出</p>
        </td>
        <td style="width:50%;text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEBd8139ea2a0b3e6ffdfd7e5a5415e91cb?method=download&shareKey=3927d2b18a87dc669f82f911fe1f422a">
        </td>
    </tr>
</table>


<h3 id="第4节-计算机语言发展"><a href="#第4节-计算机语言发展" class="headerlink" title="第4节 计算机语言发展"></a>第4节 计算机语言发展</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">第一代计算机语言(机器语言)</span> <span class="literal">--</span> <span class="comment">第二代计算机语言(汇编语言)</span> <span class="literal">--</span> <span class="comment">第三代计算机语言(C/C</span><span class="literal">++</span><span class="comment">、Java、Python</span><span class="string">.</span><span class="string">.</span><span class="string">.</span><span class="comment">)</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-第一代计算机语言"><a href="#4-1-第一代计算机语言" class="headerlink" title="4.1 第一代计算机语言"></a>4.1 第一代计算机语言</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">第一代计算机语言我们称它为机器语言,直接与机器交互,控制机器行为</span><br><span class="line"></span><br><span class="line">比如提花机,使用穿孔纸卡保存花样,控制提花机的顶针</span><br><span class="line"></span><br><span class="line">百合花  --  对应一卷纸</span><br><span class="line">玫瑰花  --  对应一卷纸</span><br><span class="line">牡丹花  --  对应一卷纸</span><br><span class="line"></span><br><span class="line">在纸上记录花样使用孔洞来记录,如果有孔顶针穿过,没有孔顶针穿不过,这时候纸带上只有两种状态 <span class="number">0</span>/<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">机器语言(第一代计算机语言)使用钻孔编程,或者是使用<span class="number">0</span>和<span class="number">1</span>进行编程,有孔表示<span class="number">1</span>没有空表示<span class="number">0</span></span><br><span class="line"></span><br><span class="line">早期计算机都是使用穿孔卡带进行存储的穿孔卡带可以存花样,也可以存算法,数据等.计算机通过读纸带然后执行纸带中记录的功能.</span><br><span class="line"></span><br><span class="line">雅卡尔提花机工作原理:</span><br><span class="line">https:<span class="regexp">//</span>v.qq.com<span class="regexp">/x/</span>page/x0553c41d57.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<table>
    <tr>
        <td>
            <h4 style="text-align:center;">雅卡尔提花机视频演示</h4>
        </td>
        <td style="text-align:center;">
            <iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=x0553c41d57" allowFullScreen="true"></iframe>
        </td>
    </tr>
</table>


<h4 id="4-2-第二代计算机语言"><a href="#4-2-第二代计算机语言" class="headerlink" title="4.2 第二代计算机语言"></a>4.2 第二代计算机语言</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">随着计算机的发展,随着存储的发展,我们需要计算机做的事情越来越复杂,这时候使用机器语言(类似于打孔,给机器输入<span class="number">0</span>/<span class="number">1</span>)编程越来越复杂.</span><br><span class="line">这是就催生出了计算机语言的发展,咱们下面举一个例子</span><br><span class="line"></span><br><span class="line">让计算机帮助我们计算 <span class="number">1</span>+<span class="number">1</span> </span><br><span class="line">如果打孔的话，下面随便举的一个例子 <span class="number">0</span>代表纸带没有孔,<span class="number">1</span>代表纸带有孔</span><br><span class="line"><span class="number">00000001</span>  <span class="comment">-- 1</span></span><br><span class="line"><span class="number">10101010</span>  <span class="comment">-- +   ADD (使用我们熟悉的字符序列代替了一串0和1)</span></span><br><span class="line"><span class="number">00000001</span>  <span class="comment">-- 1</span></span><br><span class="line"><span class="number">00000010</span>  <span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line">除了<span class="number">0</span>就是<span class="number">1</span>一个功能由很多<span class="number">0</span>和<span class="number">1</span>组成,这样的功能代码很不容易记忆,所以就有人提出想法,能不能有什么办法使用我们熟悉的字符代替<span class="number">0</span>和<span class="number">1</span>,所以汇编语言出现了</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<table>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>汇编语言编程样例</h4>
            <p>使用简单的英文符号,代替了大量的0/1机器码,相比于机器语言,汇编语言编写代码更容易.</p>
        </td>
        <td style="width:50%;">
            <img src="https://note.youdao.com/yws/api/personal/file/WEB831fe058bc913dc50d369f38d6fc3cff?method=download&shareKey=0b7a757f63297fe12876d44d6d8f5f48">
        </td>
    </tr>
</table>


<h4 id="4-3-第三代计算机语言"><a href="#4-3-第三代计算机语言" class="headerlink" title="4.3 第三代计算机语言"></a>4.3 第三代计算机语言</h4><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">第三代计算机语言我们管它叫高级语言,是因为语言发展到现阶段,语言中增加和修改了很多字符序列,在汇编语言中加法运算还需要使用ADD,在高级语言<span class="comment">(C语言)</span>中,加法运算就和我们数学中的运算差不多使用+<span class="comment">(加号)</span>,第三代的计算机语言的很多字符比较贴近于我们的日常.</span><br><span class="line"></span><br><span class="line">虽然语言表层是我们熟悉的字符序列,但是底层计算机在运行的时候还是解析成<span class="number">0</span>/<span class="number">1</span><span class="comment">(因为计算机底层原理不会变)</span>,这时就需要计算机对语言进行转换.将高级语言转成机器语言</span><br><span class="line"></span><br><span class="line">催生了各种语言编译器的发展<span class="comment">(这里不做详细讲解)</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<table>
    <tr>
        <td style="text-align:center;">
            <img style="width:80%;" src="https://note.youdao.com/yws/api/personal/file/WEBd261c18db0c16e124f8f43ad44e0ac79?method=download&shareKey=da7f2db899d1edd5aa79c13319b27cce">
        </td>
    </tr>
</table>


<h3 id="第5节-进制-了解"><a href="#第5节-进制-了解" class="headerlink" title="第5节 进制(了解)"></a>第5节 进制(了解)</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">由上面的知识得出计算机底层存储只能储存0/1两种,最大数不超过1,如果我要存115,那么计算机底层怎么存储呢? 这时候进制可以帮助我们解决这个问题.</span><br><span class="line"></span><br><span class="line">二进制、十进制、十六进制...</span><br><span class="line"></span><br><span class="line"><span class="section">十进制: 人类常用计数方式</span></span><br><span class="line"><span class="section">二进制: 计算机底层存储数据方式</span></span><br><span class="line"><span class="section">十六进制: 计算机展示数据的方式</span></span><br><span class="line"></span><br><span class="line"><span class="section">注意: 计算机底层是以二进制存储的,但是他不是直接的二进制而是以计算机补码的形式存储,如果想了解什么是补码,请自行查找相关资料,这里不做介绍.</span></span><br></pre></td></tr></table></figure>


<table>
    <tr>
        <td style="font-size:10px;width:50%;">
            <h4>进制转换</h4>
            <p>十进制转二进制和十六进制</p>
        </td>
        <td style="width:50%;">
            <img src="https://note.youdao.com/yws/api/personal/file/WEB8a9bee3f736a5b5b35e1b41e5354cde3?method=download&shareKey=4d8d893e247984d1fa9d11db97909e9f">
        </td>
    </tr>
</table>


<h2 id="第三章-计算机系统概述"><a href="#第三章-计算机系统概述" class="headerlink" title="第三章 计算机系统概述"></a>第三章 计算机系统概述</h2><h3 id="第1节-操作系统介绍"><a href="#第1节-操作系统介绍" class="headerlink" title="第1节 操作系统介绍"></a>第1节 操作系统介绍</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 操作系统概念: </span><br><span class="line"><span class="code">	操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序.也是一个使用计算机语言编写的软件.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 操作系统的功能</span><br><span class="line"><span class="code">	2.1 是整个计算机硬件和软件资源的超级大管家,管理着当前计算机的软硬件资源</span></span><br><span class="line"><span class="code">	2.2 硬件管理主要包括 </span></span><br><span class="line"><span class="code">		① CPU和内存资源的合理分配</span></span><br><span class="line"><span class="code">		② 任务优先级的控制</span></span><br><span class="line"><span class="code">		③ 其他输入输出设备的管理(网络,usb,显示器等)...</span></span><br><span class="line"><span class="code">	2.3 软件管理</span></span><br><span class="line"><span class="code">		① 多软件应用的运行</span></span><br><span class="line"><span class="code">		② 软硬件资源合理化分配等...</span></span><br><span class="line"><span class="code">		</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-操作系统发展"><a href="#第2节-操作系统发展" class="headerlink" title="第2节 操作系统发展"></a>第2节 操作系统发展</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">无操作系统</span> <span class="literal">--</span> <span class="string">.</span><span class="string">.</span><span class="string">.</span> <span class="literal">--</span> <span class="comment">DOS</span> <span class="literal">--</span> <span class="comment">windows/unix/Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">无操作系统时代: 计算机控制的硬件资源比较少</span><span class="string">,</span><span class="comment">没有复杂的任务调度问题</span><span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">	算盘</span>             <span class="literal">--</span> <span class="comment">人脑就是CPU</span><span class="string">,</span><span class="comment">珠子就是存储器</span>     <span class="literal">--</span> <span class="comment">算盘是主力人脑辅助</span>  <span class="literal">--</span> <span class="comment">半人脑，半工具</span></span><br><span class="line"><span class="comment">	步进计算器/差分机</span>  <span class="literal">--</span> <span class="comment">解放人脑(里面有自己的计算方式)</span>  <span class="literal">--</span> <span class="comment">手动运行</span><span class="string">,</span><span class="comment">机器运算</span>  <span class="literal">--</span> <span class="comment">解放人脑</span><span class="string">,</span><span class="comment">没有解放双手</span></span><br><span class="line"></span><br><span class="line"><span class="comment">有操作系统时代: 当一台计算机需要干的工作越来越多并且逻辑越来越复杂的时候</span><span class="string">,</span><span class="comment">这时候就需要一个管理者来管理这些任务</span><span class="string">,</span><span class="comment">并且合理分配计算机硬件资源</span><span class="string">.</span></span><br><span class="line"><span class="comment">	分析机</span>           <span class="literal">--</span> <span class="comment">蒸汽机运行</span><span class="string">,</span><span class="comment">机器运算</span><span class="string">,</span><span class="comment">读卡</span>       <span class="literal">--</span> <span class="comment">解放人脑</span><span class="string">,</span><span class="comment">解放双手</span></span><br><span class="line"><span class="comment">	打孔计数器</span>        <span class="literal">--</span> <span class="comment">电动运行</span><span class="string">,</span><span class="comment">机器运算</span><span class="string">,</span><span class="comment">读卡</span>        <span class="literal">--</span> <span class="comment">比分析机更先进</span></span><br><span class="line"><span class="comment">	电子计算机</span>        <span class="literal">--</span> <span class="comment">当前大规模集成电路</span>            <span class="literal">--</span> <span class="comment">超高的运算速度</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">注意: 这里可以将穿孔卡片看成最古老的操作系统(也可以把其单纯的看成一个软件)</span><span class="string">,</span><span class="comment">控制着计算机运行</span><span class="string">.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="第3节-DOS操作系统"><a href="#第3节-DOS操作系统" class="headerlink" title="第3节 DOS操作系统"></a>第3节 DOS操作系统</h3><h4 id="3-1-DOS操作系统介绍"><a href="#3-1-DOS操作系统介绍" class="headerlink" title="3.1 DOS操作系统介绍"></a>3.1 DOS操作系统介绍</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 磁盘操作系统(Disk Operating <span class="keyword">System</span>)是早期个人计算机上的一类操作系统</span><br><span class="line"><span class="number">2.</span> <span class="keyword">DOS</span>系统没有图形化操作界面,要想使用需要学习<span class="keyword">dos</span>命令</span><br><span class="line"><span class="number">3.</span> 直到windows/mac等带有图形化操作界面的系统出现,<span class="keyword">dos</span>才慢慢的退出历史舞台</span><br><span class="line"><span class="number">4.</span> 但是<span class="keyword">DOS</span>操作系统没有被取消掉,而是以一个应用软件的方式与其它操作系统共存(例如,在windows下作为windows下的应用软件与windows系统共存)</span><br></pre></td></tr></table></figure>

<h4 id="3-2-DOS操作系统的启动方式"><a href="#3-2-DOS操作系统的启动方式" class="headerlink" title="3.2 DOS操作系统的启动方式"></a>3.2 DOS操作系统的启动方式</h4><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">在windows下的启动方式</span><span class="punctuation">:</span></span><br><span class="line">	<span class="attribute">方式一</span><span class="punctuation">:</span> <span class="string">快捷键 [开始+r],开启一个黑色的命令行窗口,说明DOS启动成功</span></span><br><span class="line">	<span class="attribute">方式二</span><span class="punctuation">:</span> <span class="string">win10 可以使用搜索框直接输入cmd然后回车唤出黑色的命令行窗口</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">注意</span><span class="punctuation">:</span> <span class="string">我们把DOS常常叫做命令行窗口,所以后面我说DOS或者命令行属于一个意思.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-3-DOS操作系统的常用命令"><a href="#3-3-DOS操作系统的常用命令" class="headerlink" title="3.3 DOS操作系统的常用命令"></a>3.3 DOS操作系统的常用命令</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">dir : 列出当前目录下的文件或文件夹</span><br><span class="line">md  : 创建目录</span><br><span class="line">rd  : 删除目录</span><br><span class="line">cd  : 进入到指定目录</span><br><span class="line">cd..: 返回上一级目录</span><br><span class="line">cd/ : 切换到根目录</span><br><span class="line">del : 删除文件</span><br><span class="line"><span class="keyword">exit</span>: 退出DOS命令行</span><br><span class="line">cls : 清屏</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>每走一步,都是进步.</p>
</blockquote>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>01-计算机和计算机语言</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>操作系统</tag>
        <tag>计算机语言</tag>
        <tag>DOS</tag>
      </tags>
  </entry>
  <entry>
    <title>04-程序的流程控制</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/04_%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-顺序结构"><a href="#第一章-顺序结构" class="headerlink" title="第一章 顺序结构"></a>第一章 顺序结构</h2><span id="more"></span>

<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">计算机执行代码的默认顺序:程序从上到下从左到右执行,中间没有任何判断和跳转</span></span><br></pre></td></tr></table></figure>

<h2 id="第二章-分支结构"><a href="#第二章-分支结构" class="headerlink" title="第二章 分支结构"></a>第二章 分支结构</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">根据条件，选择性地执行某段代码</span><br><span class="line">有<span class="keyword">if</span>…<span class="keyword">else</span>和<span class="keyword">switch</span>...<span class="keyword">case</span>两种分支语句</span><br></pre></td></tr></table></figure>

<h3 id="第1节-if…else"><a href="#第1节-if…else" class="headerlink" title="第1节 if…else"></a>第1节 if…else</h3><ul>
<li>语法结构</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一 </span></span><br><span class="line"><span class="keyword">if</span>(表达式)&#123; <span class="comment">//表达式结果为布尔型,如果表达式结果为true那么执行大括号中的代码</span></span><br><span class="line">	<span class="comment">//代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二   //表达式结果为布尔型</span></span><br><span class="line"><span class="keyword">if</span>(表达式)&#123; <span class="comment">//如果表达式结果为true那么执行大括号中的代码</span></span><br><span class="line">	<span class="comment">//代码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123; <span class="comment">//如果表达式结果为false那么执行大括号中的代码</span></span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式三    //表达式结果为布尔型</span></span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="comment">//代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)&#123; <span class="comment">//表达式结果为布尔型</span></span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式四</span></span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123; <span class="comment">//表达式结果为布尔型</span></span><br><span class="line">	<span class="comment">//代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)&#123;  <span class="comment">//表达式结果为布尔型</span></span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;成年人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未成年人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;成年人&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未成年人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> x=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">60</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">60</span> &amp;&amp; x&lt;<span class="number">80</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;CCC&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">80</span> &amp;&amp; x&lt;<span class="number">90</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;BBB&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else),并且从小到大输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入num1:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入num2:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入num3:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(num1&lt;=num2 &amp;&amp; num1&lt;=num3) &#123;</span><br><span class="line">        System.out.print(num1+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num2&lt;=num3) &#123;</span><br><span class="line">            System.out.print(num2+<span class="string">&quot;,&quot;</span>+num3);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(num3+<span class="string">&quot;,&quot;</span>+num2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num2&lt;=num1 &amp;&amp; num2&lt;=num3)&#123;</span><br><span class="line">        System.out.print(num2+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num1&lt;=num3) &#123;</span><br><span class="line">            System.out.print(num1+<span class="string">&quot;,&quot;</span>+num3);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(num3+<span class="string">&quot;,&quot;</span>+num1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num3&lt;=num1 &amp;&amp; num3&lt;=num2)&#123;</span><br><span class="line">        System.out.print(num3+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num1&lt;=num2) &#123;</span><br><span class="line">            System.out.print(num1+<span class="string">&quot;,&quot;</span>+num2);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(num2+<span class="string">&quot;,&quot;</span>+num1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;？？？&quot;</span>+num1+<span class="string">&quot;&lt;-&gt;&quot;</span>+num2+<span class="string">&quot;&lt;-&gt;&quot;</span>+num3+<span class="string">&quot;？？？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-switch…case"><a href="#第2节-switch…case" class="headerlink" title="第2节 switch…case"></a>第2节 switch…case</h3><ul>
<li>语法结构</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)&#123;  <span class="comment">//变量的数据类型 byte short int char String(jdk1.7+) 枚举</span></span><br><span class="line">	<span class="keyword">case</span> 常量<span class="number">1</span>:   <span class="comment">//case的值必须是常量</span></span><br><span class="line">		<span class="comment">//代码</span></span><br><span class="line">		<span class="keyword">break</span>;    <span class="comment">//break关键字用于执行完当前case之后跳出switch语句,如果不加代码继续向下执行.</span></span><br><span class="line">	<span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">		<span class="comment">//代码</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> 常量<span class="number">3</span>:</span><br><span class="line">		<span class="comment">//代码</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:      <span class="comment">//default可选</span></span><br><span class="line">		<span class="comment">//代码</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">season</span> <span class="operator">=</span> <span class="string">&quot;summer&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (season) &#123;</span><br><span class="line">   	<span class="keyword">case</span> <span class="string">&quot;spring&quot;</span>:</span><br><span class="line">		System.out.println(<span class="string">&quot;春&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">   	<span class="keyword">case</span> <span class="string">&quot;summer&quot;</span>:</span><br><span class="line">		System.out.println(<span class="string">&quot;夏&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;autumn&quot;</span>:</span><br><span class="line">		System.out.println(<span class="string">&quot;秋&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;winter&quot;</span>:</span><br><span class="line">		System.out.println(<span class="string">&quot;冬&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">		System.out.println(<span class="string">&quot;季节输入有误&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//键盘输入指定月份,打印该月份所属的季节。假如 :1,2,3春季4,5,6夏季7,8,9秋季10,11,12冬季</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入月份:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;这个月份不存在...&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="第三章-循环结构"><a href="#第三章-循环结构" class="headerlink" title="第三章 循环结构"></a>第三章 循环结构</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在某些条件满足的情况下，反复执行特定代码的功能</span><br><span class="line"></span><br><span class="line">循环语句的四个组成部分</span><br><span class="line"><span class="bullet">	1.</span> 初始化部分</span><br><span class="line"><span class="bullet">	2.</span> 循环条件部分</span><br><span class="line"><span class="bullet">	3.</span> 循环体部分</span><br><span class="line"><span class="bullet">	4.</span> 迭代部分</span><br><span class="line"></span><br><span class="line">循环语句分类</span><br><span class="line"><span class="bullet">	1.</span> for 循环</span><br><span class="line"><span class="bullet">	2.</span> while 循环</span><br><span class="line"><span class="bullet">	3.</span> do/while 循环</span><br></pre></td></tr></table></figure>

<h3 id="第1节-for循环"><a href="#第1节-for循环" class="headerlink" title="第1节 for循环"></a>第1节 for循环</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①;布尔条件表达式②;条件修改表达式③)&#123;</span><br><span class="line">    <span class="comment">//循环体语句块④</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先执行①</span></span><br><span class="line"><span class="comment">//在执行②,如果条件成立执行④循环体,如果条件表达式不成立,那么循环结束</span></span><br><span class="line"><span class="comment">//在执行③,修改循环条件,然后接着执行②</span></span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求1+2+...+100的和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">	sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure>

<h3 id="第2节-while循环"><a href="#第2节-while循环" class="headerlink" title="第2节 while循环"></a>第2节 while循环</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[初始化语句]</span><br><span class="line"><span class="keyword">while</span>( 布尔值测试表达式)｛</span><br><span class="line">    <span class="comment">//语句或语句块;</span></span><br><span class="line">	[更改语句;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">	sum+=i;</span><br><span class="line">   	i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br></pre></td></tr></table></figure>

<h3 id="第3节-do…while循环"><a href="#第3节-do…while循环" class="headerlink" title="第3节 do…while循环"></a>第3节 do…while循环</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[初始化语句]</span><br><span class="line"><span class="keyword">do</span>｛</span><br><span class="line">	语句或语句块;</span><br><span class="line">    [更改语句;]</span><br><span class="line">｝<span class="keyword">while</span>(布尔值条件表达式); </span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	sum += i;</span><br><span class="line">	i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br></pre></td></tr></table></figure>

<h3 id="第4节-循环练习"><a href="#第4节-循环练习" class="headerlink" title="第4节 循环练习"></a>第4节 循环练习</h3><ul>
<li>练习1</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>打印<span class="number">1</span>~<span class="number">100</span>之间所有是<span class="number">7</span>的倍数的整数的个数及总和</span><br></pre></td></tr></table></figure>

<ul>
<li>练习3</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//输出所有的水仙花数,所谓水仙花数是指一个3位数,其各个位上数字立方和等于其本身.例如:153 = 1<span class="emphasis">*1*</span>1+3<span class="emphasis">*3*</span>3+5<span class="emphasis">*5*</span>5</span><br></pre></td></tr></table></figure>

<h3 id="第5节-补充循环"><a href="#第5节-补充循环" class="headerlink" title="第5节 补充循环"></a>第5节 补充循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设计一个无限循环(死循环)</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第6节-嵌套循环"><a href="#第6节-嵌套循环" class="headerlink" title="第6节 嵌套循环"></a>第6节 嵌套循环</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">将一个循环放在另一个循环体内,就形成了嵌套循环.嵌套循环就是把内层循环当成外层循环的循环体,for <span class="keyword">while</span> <span class="keyword">do</span><span class="params">...</span><span class="keyword">while</span>都可以嵌套</span><br><span class="line">如果设外层循环次数为m次,内层为n次,则内层循环体实际上需要执行m*n次</span><br></pre></td></tr></table></figure>

<ul>
<li>练习1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//九九乘法表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1—100之间的所有质数(质数是只能被1和他本身整除的数称为质数,1既不是质数也不是合数)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line">                b=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第四章-特殊流程控制"><a href="#第四章-特殊流程控制" class="headerlink" title="第四章 特殊流程控制"></a>第四章 特殊流程控制</h2><h3 id="第1节-break语句"><a href="#第1节-break语句" class="headerlink" title="第1节 break语句"></a>第1节 break语句</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>语句用于终止某个语句块的执行</span><br><span class="line"><span class="keyword">break</span>语句出现在多层嵌套的语句块中时,可以通过标签指明要终止的是哪一层语句块</span><br></pre></td></tr></table></figure>

<ul>
<li>案例1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单层循环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;<span class="comment">//结束当前循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双层循环 break只能结束一层循环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;=<span class="number">5</span> ; j++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//结束当前循环</span></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按照标记跳转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  ii:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">    jj:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span> ii; <span class="comment">//当j==1时结束ii标记的for循环</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-continue语句"><a href="#第2节-continue语句" class="headerlink" title="第2节 continue语句"></a>第2节 continue语句</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span>语句用于跳过某个循环语句块的一次执行</span><br><span class="line"><span class="keyword">continue</span>语句出现在多层嵌套的循环语句体中时,可以通过标签指明要跳过的是哪一层循环</span><br></pre></td></tr></table></figure>

<ul>
<li>案例1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单层循环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  ii:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    jj:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span> ii; <span class="comment">//当j==1时跳过一次ii标记的for循环</span></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  结果</span></span><br><span class="line"><span class="comment">  j=0</span></span><br><span class="line"><span class="comment">  j=0</span></span><br><span class="line"><span class="comment">  j=0</span></span><br><span class="line"><span class="comment">  j=0</span></span><br><span class="line"><span class="comment">  j=0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>04-程序的流程控制</category>
      </categories>
      <tags>
        <tag>流程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>03-Java基础语法</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/03_Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-关键字"><a href="#第一章-关键字" class="headerlink" title="第一章 关键字"></a>第一章 关键字</h2><span id="more"></span>

<ul>
<li>关键字的概念</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">被Java语言赋予了特殊含义，用作专门用途的字符串<span class="comment">(单词)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>关键字特点</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">关键字中所有字母都是小写</span><br></pre></td></tr></table></figure>

<ul>
<li>常见关键字</li>
</ul>
<table>
<thead>
<tr>
<th>class</th>
<th>interface</th>
<th>enum</th>
<th>byte</th>
<th>short</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>float</td>
<td>long</td>
<td>double</td>
<td>char</td>
</tr>
<tr>
<td>boolean</td>
<td>void</td>
<td>true</td>
<td>false</td>
<td>null</td>
</tr>
<tr>
<td>if</td>
<td>else</td>
<td>switch</td>
<td>case</td>
<td>default</td>
</tr>
<tr>
<td>while</td>
<td>do</td>
<td>for</td>
<td>break</td>
<td>continue</td>
</tr>
<tr>
<td>return</td>
<td>private</td>
<td>protected</td>
<td>public</td>
<td>abstract</td>
</tr>
<tr>
<td>final</td>
<td>static</td>
<td>synchronized</td>
<td>extends</td>
<td>implements</td>
</tr>
<tr>
<td>new</td>
<td>this</td>
<td>super</td>
<td>instanceof</td>
<td>try</td>
</tr>
<tr>
<td>catch</td>
<td>finally</td>
<td>throw</td>
<td>throws</td>
<td>package</td>
</tr>
<tr>
<td>native</td>
<td>strictfp</td>
<td>transient</td>
<td>volatile</td>
<td>assert</td>
</tr>
</tbody></table>
<ul>
<li>保留字</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">保留字就是在当前Java语言中没有用到,但以后版本中可能会用到</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>cast</th>
<th>future</th>
<th>generic</th>
<th>inner</th>
<th>operator</th>
</tr>
</thead>
<tbody><tr>
<td>outer</td>
<td>rest</td>
<td>var</td>
<td>goto</td>
<td>const</td>
</tr>
</tbody></table>
<h2 id="第二章-标识符"><a href="#第二章-标识符" class="headerlink" title="第二章 标识符"></a>第二章 标识符</h2><ul>
<li>标识符概念</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">官方: Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符</span></span><br><span class="line"><span class="section">通俗: 凡是自己可以起名字的地方都叫标识符</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标识符的定义规则</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 由<span class="number">26</span>个英文字母大小写，<span class="number">0</span>-<span class="number">9</span> ，_或 $ 组成</span><br><span class="line"><span class="attribute">2</span>. 数字不可以开头</span><br><span class="line"><span class="attribute">3</span>. 不可以使用关键字和保留字，但能包含关键字和保留字</span><br><span class="line"><span class="attribute">4</span>. Java中严格区分大小写，长度无限制</span><br><span class="line"><span class="attribute">5</span>. 标识符不能包含空格</span><br></pre></td></tr></table></figure>

<ul>
<li>注意事项</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">在起名字时，为了提高阅读性，要尽量有意义，<span class="string">&quot;见名知意&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java中的名称命名规范</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">包名：多单词组成时所有字母都小写：xxxyyyzzz,一般为公司域名的倒序 eg: <span class="keyword">com</span>.alibaba   <span class="keyword">com</span>.baidu</span><br><span class="line">类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</span><br><span class="line">变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</span><br><span class="line">常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</span><br></pre></td></tr></table></figure>

<h2 id="第三章-变量"><a href="#第三章-变量" class="headerlink" title="第三章 变量"></a>第三章 变量</h2><h3 id="第1节-变量的概念"><a href="#第1节-变量的概念" class="headerlink" title="第1节 变量的概念"></a>第1节 变量的概念</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 内存中的一个存储区域</span><br><span class="line"><span class="bullet">2.</span> 该区域有自己的名称（变量名）和类型（数据类型）</span><br><span class="line"><span class="bullet">3.</span> 该区域的数据可以在同一类型范围内不断变化</span><br><span class="line"><span class="bullet">4.</span> Java中每个变量必须先声明，后使用</span><br></pre></td></tr></table></figure>

<ul>
<li>变量的格式</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">数据类型  变量名<span class="operator">=</span>初始化值</span><br></pre></td></tr></table></figure>

<ul>
<li>变量的使用</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">变量是通过使用变量名来访问这块区域的</span><br></pre></td></tr></table></figure>

<h3 id="第2节-变量的分类"><a href="#第2节-变量的分类" class="headerlink" title="第2节 变量的分类"></a>第2节 变量的分类</h3><h4 id="2-1-变量的分类-按数据类型"><a href="#2-1-变量的分类-按数据类型" class="headerlink" title="2.1 变量的分类(按数据类型)"></a>2.1 变量的分类(按数据类型)</h4><img src="https://note.youdao.com/yws/api/personal/file/WEB283063bb725359fceecf62d3692d5e98?method=download&shareKey=26bff2088ac6cf54f890c5ddaf76440f" style="zoom: 50%;" >

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">为什么数据要分这么多种类型<span class="string">?这</span>样的分类有什么好处?</span><br></pre></td></tr></table></figure>

<h4 id="2-2-变量的分类-按声明位置"><a href="#2-2-变量的分类-按声明位置" class="headerlink" title="2.2 变量的分类(按声明位置)"></a>2.2 变量的分类(按声明位置)</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">在方法体外，类体内声明的变量称为成员变量</span><br><span class="line">在方法体内部声明的变量称为局部变量</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB66345969200295f541e114c5f0a27fe8?method=download&shareKey=455539b86df51403980ac02c14c04506" style="zoom:50%;" >

<blockquote>
<p>注意事项: 局部变量除形参外，需显式初始化</p>
</blockquote>
<h2 id="第四章-数据类型"><a href="#第四章-数据类型" class="headerlink" title="第四章 数据类型"></a>第四章 数据类型</h2><h3 id="第1节-整数类型"><a href="#第1节-整数类型" class="headerlink" title="第1节 整数类型"></a>第1节 整数类型</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>、<span class="type">short</span>、<span class="type">int</span>、<span class="type">long</span></span><br><span class="line"></span><br><span class="line">Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性</span><br><span class="line"></span><br><span class="line">Java的整型常量默认为 <span class="type">int</span> 型，声明<span class="type">long</span>型常量须后加<span class="string">&quot;l&quot;</span>或<span class="string">&quot;L&quot;</span> eg: <span class="type">long</span> a=<span class="number">100L</span> 或 <span class="type">long</span> b=<span class="number">100l</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类   型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1字节&#x3D;8bit</td>
<td>-128 ~ 127</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>-2^15 ~2^15-1</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-2^31 ~ 2^31-1</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>-2^63 ~ 2^63-1</td>
</tr>
</tbody></table>
<h3 id="第2节-浮点类型"><a href="#第2节-浮点类型" class="headerlink" title="第2节 浮点类型"></a>第2节 浮点类型</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span>、<span class="type">double</span></span><br><span class="line"></span><br><span class="line">与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体OS的影响</span><br><span class="line"></span><br><span class="line">Java 的浮点型常量默认为<span class="type">double</span>型，声明<span class="type">float</span>型常量，须后加<span class="string">&quot;f&quot;</span>或<span class="string">&quot;F&quot;</span> eg: <span class="type">float</span> f=<span class="number">11.1f</span> 或 <span class="type">float</span> f=<span class="number">12.1F</span></span><br><span class="line"></span><br><span class="line">浮点型常量有两种表示形式：</span><br><span class="line">	十进制数形式 : 如 <span class="number">5.12</span>       <span class="number">512.0f</span>        <span class="number">.512</span>   (必须有小数点）</span><br><span class="line">	科学计数法形式:如 <span class="number">5.12e2</span>      <span class="number">512E2</span>     <span class="number">100E-2</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类  型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>单精度float</td>
<td>4字节</td>
<td>-3.403E38 ~ 3.403E38</td>
</tr>
<tr>
<td>双精度double</td>
<td>8字节</td>
<td>-1.798E308 ~ 1.798E308</td>
</tr>
</tbody></table>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">什么是单精度,什么是双精度</span><br><span class="line"><span class="section">单精度: 指32位的浮点数,小数点后7位或者8位是准确的</span></span><br><span class="line"><span class="section">双精度: 指64位的浮点数,小数点后16位是准确的</span></span><br><span class="line"></span><br><span class="line">双精度表示的浮点数比单精度小数拥有更高的精度.</span><br></pre></td></tr></table></figure>

<h3 id="第3节-字符类型"><a href="#第3节-字符类型" class="headerlink" title="第3节 字符类型"></a>第3节 字符类型</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> 型数据用来表示通常意义上<span class="string">&quot;字符&quot;</span>(<span class="number">2</span>字节)</span><br><span class="line"></span><br><span class="line">字符型常量的三种表现形式:</span><br><span class="line"><span class="number">1</span>. 字符常量是用单引号(&#x27;&#x27;)括起来的单个字符，涵盖世界上所有书面语的字符 eg: <span class="type">char</span> c1=<span class="string">&#x27;1&#x27;</span> <span class="type">char</span> c2=<span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="number">2</span>. Java中还允许使用转义字符<span class="string">&#x27;\&#x27;</span>来将其后的字符转变为特殊字符型常量 <span class="type">char</span> c3 = <span class="string">&#x27;\n&#x27;</span> <span class="comment">//换行</span></span><br><span class="line"><span class="number">3</span>. 直接使用 Unicode 值来表示字符型常量  <span class="type">char</span> c4=<span class="string">&#x27;\u1234&#x27;</span> <span class="comment">//ሴ</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>类型是可以和数值型数据进行运算的,因为它都对应有Unicode码</span><br><span class="line">那么什么是Unicode码？了解Unicode码之前我们先说一下ASCII码</span><br></pre></td></tr></table></figure>

<ul>
<li>ASCII 码</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">上个世纪<span class="number">60</span>年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定，被称为ASCII码</span><br><span class="line"></span><br><span class="line">ASCII码占计算机存储的<span class="number">8</span>位也就是一个<span class="built_in">byte</span>(字节)共规定了<span class="number">128</span>个字符的编码，只占了一个字节的后<span class="number">7</span>位第<span class="number">8</span>位统一规定为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">128</span>个字符编码中比如常见的【空格】是<span class="number">32</span>(二进制<span class="number">00100000</span>) 大写字母【<span class="selector-tag">A</span>】是<span class="number">65</span>（二进制<span class="number">01000001</span>）等.</span><br><span class="line"></span><br><span class="line">缺点:</span><br><span class="line">由于计算机是美国人发明的,在设计字符编码的时候只考虑到了美国的字符数量,ASCII码不能囊括全球所有的字符.</span><br><span class="line"></span><br><span class="line">解决方案:</span><br><span class="line">计算机被各个国家开始使用,所以每一个国家针对自己国家的符号,都设计了自己国家的编码方式,比如中国的<span class="built_in">GBK</span>(国标码)</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB0401740bb3bcf3d1deba032c70b1f6f4?method=download&shareKey=f9e1d2e0d7995fb8d095928f063fe7c3">

<ul>
<li>Unicode码</li>
</ul>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">乱码<span class="symbol">:</span> 由于各个国家都有自己的编码,美国使用ASCII码(A对应<span class="number">65</span>)我们国家使用GBK(A不一定是<span class="number">65</span>),所以如果我用我们国家的计算机编写的文件,发送到美国,美国计算机在打开的时候就会出现内容混乱的问题.这就是乱码产生的原因.</span><br><span class="line"></span><br><span class="line">解决乱码的方式<span class="symbol">:</span> 指定全球统一编码,将全球所有的字符全部以一种编码方式编进计算机中.这就是<span class="built_in">Unicode</span>码的由来</span><br><span class="line"></span><br><span class="line">缺点<span class="symbol">:</span> <span class="built_in">Unicode</span>码只是一个符号集,他只规定了符号的二进制代码却没有规定这个二进制应该如何存储或者说这个二进制代码在计算机中应该存几个字节.</span><br><span class="line"><span class="built_in">char</span> <span class="symbol">c1</span>=&#x27;中&#x27; <span class="built_in">char</span> <span class="symbol">c2</span>=&#x27;A&#x27; 看这两个<span class="built_in">char</span>类型在计算机存储的时候,第一个需要两个字节才能存下,而第二个只需要一个字节即可,我们<span class="built_in">Unicode</span>码根本就区分不出来 <span class="symbol">c1</span>和<span class="symbol">c2</span>到底是使用<span class="built_in">Unicode</span>码还是ASCII码进行编码.</span><br><span class="line"></span><br><span class="line">所以针对<span class="built_in">Unicode</span>码这个编码集,实现了<span class="built_in">Unicode</span>码的存储方式,就是我们接下来的UTF-<span class="number">8</span>编码</span><br></pre></td></tr></table></figure>

<ul>
<li>UTF-8</li>
</ul>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">UTF<span class="string">-8</span>是在互联网上使用最广的一种 Unicode 的实现方式</span><br><span class="line">UTF<span class="string">-8</span>是一种变长的编码方式。它可以使用1<span class="string">-6</span>个字节表示一个符号,根据不同的符号而变化字节长度</span><br><span class="line"></span><br><span class="line">所以UTF<span class="string">-8</span>编码是后面我们学习的时候用的最多的编码方式</span><br></pre></td></tr></table></figure>

<h3 id="第4节-布尔类型"><a href="#第4节-布尔类型" class="headerlink" title="第4节 布尔类型"></a>第4节 布尔类型</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>ean</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span>ean 类型适于逻辑运算，一般用于程序流程控制(后面会讲到)</span><br><span class="line"><span class="built_in">bool</span>ean类型数据只允许取值<span class="literal">true</span>和<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="第5节-基本数据类型转换"><a href="#第5节-基本数据类型转换" class="headerlink" title="第5节 基本数据类型转换"></a>第5节 基本数据类型转换</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">自动类型转换：容量小的类型自动转换为容量大的数据类型</span><br><span class="line"></span><br><span class="line">有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>,<span class="type">short</span>,<span class="type">char</span>之间不会相互转换，他们三者在计算时首先转换为<span class="type">int</span>类型</span><br><span class="line"></span><br><span class="line">当把任何基本类型的值和字符串值进行连接运算时(+)，基本类型的值将自动转化为字符串类型</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB6d64b851fb0d60f219a4779b4e0dcf52?method=download&shareKey=56419e51db9d9d58ec31a7222af4cb1e">

<blockquote>
<p>数据类型按容量大小排序 ↑↑↑↑↑↑↑↑↑↑</p>
</blockquote>
<h3 id="第6节-强制类型转换"><a href="#第6节-强制类型转换" class="headerlink" title="第6节 强制类型转换"></a>第6节 强制类型转换</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">将容量大的数据类型转换成容量小的数据类型叫强制转换 eg: 将 <span class="type">int</span> 转成 <span class="type">byte</span></span><br><span class="line">强制转换需要使用强制转换符号【(括号)】  eg: <span class="type">int</span> a=<span class="number">100</span>; <span class="type">byte</span> b = (<span class="type">byte</span>)a; <span class="comment">//a是int型 b是byte型</span></span><br><span class="line"></span><br><span class="line">注意:强制类型转换可能造成精度降低或者数据溢出.  <span class="type">boolean</span>不能进行强制类型转换.</span><br></pre></td></tr></table></figure>

<h2 id="第五章-运算符"><a href="#第五章-运算符" class="headerlink" title="第五章 运算符"></a>第五章 运算符</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</span><br><span class="line"></span><br><span class="line">运算符的分类:</span><br><span class="line"><span class="bullet">1.</span> 算术运算符</span><br><span class="line"><span class="bullet">2.</span> 赋值运算符</span><br><span class="line"><span class="bullet">3.</span> 比较运算符（关系运算符）</span><br><span class="line"><span class="bullet">4.</span> 逻辑运算符</span><br><span class="line"><span class="bullet">5.</span> 位运算符</span><br><span class="line"><span class="bullet">6.</span> 三元运算符</span><br></pre></td></tr></table></figure>

<h3 id="第1节-算术运算符"><a href="#第1节-算术运算符" class="headerlink" title="第1节 算术运算符"></a>第1节 算术运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>介绍</th>
<th>范例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+1</td>
<td>1</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>a&#x3D;1; -a</td>
<td>-1</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>1+1</td>
<td>2</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>1-1</td>
<td>0</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>1*2</td>
<td>2</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除</td>
<td>2&#x2F;2</td>
<td>1</td>
</tr>
<tr>
<td>%</td>
<td>取模</td>
<td>7%5</td>
<td>2</td>
</tr>
<tr>
<td>++<br />++</td>
<td>自增(前) 先运算后取值<br />自增(后) 先取值后运算</td>
<td>a&#x3D;2;b&#x3D;++a;<br/>a&#x3D;2;b&#x3D;a++;</td>
<td>a&#x3D;3;b&#x3D;3<br/>a&#x3D;3;b&#x3D;2</td>
</tr>
<tr>
<td>–<br />–</td>
<td>自减(前) 先运算后取值<br/>自减(后) 先取值后运算</td>
<td>a&#x3D;2;b&#x3D;- -a;<br/>a&#x3D;2;b&#x3D;a- -;</td>
<td>a&#x3D;1;b&#x3D;1<br/>a&#x3D;1;b&#x3D;2</td>
</tr>
<tr>
<td>+</td>
<td>字符串相加</td>
<td>“1”+”1”</td>
<td>“11”</td>
</tr>
</tbody></table>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">注意: </span><br><span class="line">1. 如果对负数取模，可以把模数负号忽略不记 eg: 5%<span class="attribute">-2</span>=1</span><br><span class="line">2. 但被模数是负数则不可忽略 eg: -5%<span class="attribute">2</span>=-1 当被模数为负数时,他的结果是不确定的</span><br><span class="line">3. 对于除号(<span class="string">&quot;/&quot;</span>)如果计算的是整数类型那么结果是整数 eg: 2/<span class="attribute">3</span>=0,4/2=2</span><br><span class="line">4. 对于除号(<span class="string">&quot;/&quot;</span>)如果计算的是浮点类型那么结果是为浮点型 eg: 2.0/<span class="attribute">3</span>=0.6666666666666666,4.0/2=2.0</span><br></pre></td></tr></table></figure>

<h3 id="第2节-赋值运算符"><a href="#第2节-赋值运算符" class="headerlink" title="第2节 赋值运算符"></a>第2节 赋值运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>介绍</th>
<th>范例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>赋值</td>
<td>int a&#x3D;100;</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>加等</td>
<td>int a&#x3D;1;a+&#x3D;1; &#x2F;&#x2F; a&#x3D;a+1;</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>减等</td>
<td>int a&#x3D;1;a-&#x3D;1; &#x2F;&#x2F; a&#x3D;a-1;</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘等</td>
<td>int a&#x3D;1;a*&#x3D;1; &#x2F;&#x2F; a&#x3D;a*1;</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除等</td>
<td>int a&#x3D;1;a&#x2F;&#x3D;1; &#x2F;&#x2F; a&#x3D;a&#x2F;1;</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>模等</td>
<td>int a&#x3D;1;a%&#x3D;1; &#x2F;&#x2F; a&#x3D;a%1;</td>
</tr>
</tbody></table>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">思考:</span><br><span class="line">  <span class="keyword">short </span>s = <span class="number">3</span>;</span><br><span class="line">  s=s+<span class="number">2</span><span class="comment">;  ①</span></span><br><span class="line">  s+=<span class="number">2</span><span class="comment">;   ②</span></span><br><span class="line">①和②有什么区别？</span><br></pre></td></tr></table></figure>

<h3 id="第3节-比较运算符"><a href="#第3节-比较运算符" class="headerlink" title="第3节 比较运算符"></a>第3节 比较运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>介绍</th>
<th>范例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>判断两个数书否相等</td>
<td>4&#x3D;&#x3D;3</td>
<td>false</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不等于</td>
<td>4!&#x3D;3</td>
<td>true</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4&lt;3</td>
<td>false</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4&gt;3</td>
<td>true</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
<td>4&lt;&#x3D;3</td>
<td>false</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
<td>4&gt;&#x3D;3</td>
<td>true</td>
</tr>
<tr>
<td>instanceof</td>
<td>检查是否是类的对象</td>
<td>“Hello”  instanceof  String</td>
<td>true</td>
</tr>
</tbody></table>
<h3 id="第4节-逻辑运算符"><a href="#第4节-逻辑运算符" class="headerlink" title="第4节 逻辑运算符"></a>第4节 逻辑运算符</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">&amp;  - 逻辑与      |  - 逻辑或        ! - 逻辑非</span></span><br><span class="line"><span class="meta">&amp;&amp; - 短路与      || - 短路或        ^ - 逻辑异或</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>a&amp;b</th>
<th>a|b</th>
<th>!a</th>
<th>a^b</th>
<th>a&amp;&amp;b</th>
<th>a||b</th>
</tr>
</thead>
<tbody><tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody></table>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">逻辑运算符用于连接布尔型表达式 eg: <span class="number">5</span>&lt; x &gt;<span class="number">10</span>(x大于<span class="number">5</span>并且小于<span class="number">10</span>)  在Java需要写成  x&gt;<span class="number">5</span>&amp;x&lt;<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&amp;&quot;</span> 和 <span class="string">&quot;&amp;&amp;&quot;</span> 的区别 </span><br><span class="line"><span class="string">&quot;&amp;&quot;</span>  :  左边无论真假，右边都进行运算</span><br><span class="line"><span class="string">&quot;&amp;&amp;&quot;</span> :  如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;|&quot;</span> 和 <span class="string">&quot;||&quot;</span> 的区别 当左边为真，右边不参与运算</span><br><span class="line"><span class="string">&quot;|&quot;</span>  : 当左边为真，右边也参与运算</span><br><span class="line"><span class="string">&quot;||&quot;</span> : 当左边为真，右边不参与运算</span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">2</span> &amp; ++y==<span class="number">2</span>)&#123;</span><br><span class="line">	x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">2</span> &amp;&amp; ++y==<span class="number">2</span>)&#123;</span><br><span class="line">	x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> | ++y==<span class="number">1</span>)&#123;</span><br><span class="line">	x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> || ++y==<span class="number">1</span>)&#123;</span><br><span class="line">	x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span><br></pre></td></tr></table></figure>

<h3 id="第5节-位运算符"><a href="#第5节-位运算符" class="headerlink" title="第5节 位运算符"></a>第5节 位运算符</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">位运算是直接对二进制进行运算,先转换成二进制,然后在运算</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>运算</th>
<th>范例</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>3 &lt;&lt; 2 &#x3D; 12  –  3*2*2&#x3D;12</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>3 &gt;&gt; 1 &#x3D; 1    –  3&#x2F;2&#x3D;1</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>无符号右移</td>
<td>3 &gt;&gt;&gt; 1 &#x3D; 1  –  3&#x2F;2&#x3D;1</td>
</tr>
<tr>
<td>&amp;</td>
<td>与运算</td>
<td>6 &amp; 3 &#x3D; 2</td>
</tr>
<tr>
<td>|</td>
<td>或运算</td>
<td>6 | 3 &#x3D; 7</td>
</tr>
<tr>
<td>^</td>
<td>异或运算</td>
<td>6 ^ 3 &#x3D; 5</td>
</tr>
<tr>
<td>~</td>
<td>反码</td>
<td>~6 &#x3D; -7</td>
</tr>
</tbody></table>
<h3 id="第6节-三元运算符"><a href="#第6节-三元运算符" class="headerlink" title="第6节 三元运算符"></a>第6节 三元运算符</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">格式: (条件表达式)<span class="string">?表</span>达式<span class="number">1</span><span class="symbol">:</span>表达式<span class="number">2</span></span><br><span class="line"></span><br><span class="line">条件表达式: 如果为<span class="literal">true</span> 运算后的结果是表达式<span class="number">1</span>;如果为<span class="literal">false</span> 运算后的结果是表达式<span class="number">2</span></span><br><span class="line">表达式<span class="number">1</span>和表达式<span class="number">2</span>为同种类型</span><br><span class="line"></span><br><span class="line">练习:</span><br><span class="line"><span class="number">1</span>. 获取两个数中的较大数</span><br><span class="line"><span class="number">2</span>. 获取三个数中的较大数</span><br></pre></td></tr></table></figure>

<h3 id="第7节-运算符优先级"><a href="#第7节-运算符优先级" class="headerlink" title="第7节 运算符优先级"></a>第7节 运算符优先级</h3><img src="https://note.youdao.com/yws/api/personal/file/WEBd3911293aa7cbd07dacb3e3a2785eab6?method=download&shareKey=431b616a2d6bc0b9b801f197fcd4bf57" style="zoom: 33%;" >



<h2 id="第六章-键盘输入"><a href="#第六章-键盘输入" class="headerlink" title="第六章 键盘输入"></a>第六章 键盘输入</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">Java提供了处理键盘输入的工具类Scanner,这个类在本地安装的JDK安装包下的jre文件夹中的<span class="class"><span class="keyword">lib</span>文件夹中的<span class="title">rt</span>.<span class="title">jar</span>包中,所以要想使用此类必须保证本地安装<span class="title">JDK</span>.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Scanner实例</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> scanner.nextInt();<span class="comment">//获取int类型数据</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> scanner.nextDouble();<span class="comment">//获取double类型数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.next();<span class="comment">//获取字符串类型数据</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>03-Java基础语法</category>
      </categories>
      <tags>
        <tag>java基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>05-方法</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/05_%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-方法概念"><a href="#第一章-方法概念" class="headerlink" title="第一章 方法概念"></a>第一章 方法概念</h2><span id="more"></span>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">实现特定功能的一段代码,可反复被调用</span><br></pre></td></tr></table></figure>

<table>
    <tbody>
        <tr>
            <td style="font-size:12px;width:50%;">
                计算机 — 模拟现实 — 通过软件控制硬件<br/>比如豆浆机 — 里面的微控制器 — 控制豆浆机<br/>右图面板上有很多种模式<br/>每一种模式对应不同的搅拌次数、搅拌时间、烧水温度等…<br/>这些硬件的动作都需要软件的控制<br/>硬件的每一种模式至少对应这软件里面的一个方法<br/>总结: 方法其实就是实现特定功能的代码的集合
            </td>
            <td style="width:50%;">
                <img src="https://note.youdao.com/yws/api/personal/file/WEBb24ff3680bb53f5a769d7d00122c62f8?method=download&shareKey=2fc31da17367fbad0ff23bfe1ef86478">
            </td>
        </tr>
    </tbody>
</table>



<h2 id="第二章-方法的定义"><a href="#第二章-方法的定义" class="headerlink" title="第二章 方法的定义"></a>第二章 方法的定义</h2><ul>
<li>语法格式</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[权限修饰符]</span><span class="selector-attr">[其它修饰符]</span> 返回值类型 方法名称([参数列表])&#123;</span><br><span class="line">	<span class="comment">//方法体</span></span><br><span class="line">	return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
    <tbody>
        <tr>
            <td style="font-size: 12px;">
                中括号处的设置可以省略,返回值类型可以是基本数据类型也可以是引用数据类型,如果方法不存在返回值那么为void,方法名称自定义,但是需要遵循标识符的命名规范,不能省略.参数列表可以有多个,也可以为0个,无限制.return关键字给方法提供返回值,如果方法没有返回值return可以省略也可以不省略,如果方法有返回值,那么return一定不能省略,并且要返回方法返回值类型相同的值.
            </td>
        </tr>
    </tbody>
</table>



<ul>
<li>定义位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">方法定义在类的内部,与<span class="selector-tag">main</span>方法并列,方法不能定义在另一个方法中.</span><br></pre></td></tr></table></figure>

<ul>
<li>方法定义举例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无返回值,无参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值,无参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span> 返回整型数据;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值,有参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">	<span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值,有参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">	<span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带其它修饰符static</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">	<span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法的参数列表</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当方法传入的参数个数不确定时可以采用参数列表的方式,参数列表的格式: 数据类型...参数名</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>...args)</span>&#123;</span><br><span class="line">  <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">    s+=args[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重载方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在同一个类中,方法名相同参数列表不同的方法我们称之为重载方法.</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String s)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>知识扩展</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">带<span class="keyword">static</span>修饰的方法被称为静态方法</span><br><span class="line">非<span class="keyword">static</span>修饰的方法被称为实例方法</span><br><span class="line"></span><br><span class="line">具体这两种方法有什么不同,后面会做详细介绍</span><br></pre></td></tr></table></figure>

<h2 id="第三章-方法的调用"><a href="#第三章-方法的调用" class="headerlink" title="第三章 方法的调用"></a>第三章 方法的调用</h2><img src="https://note.youdao.com/yws/api/personal/file/WEB6b73f2b91946530eaf224143d29bc203?method=download&shareKey=c64de07ad6c7e1806538bb840faeb89c">

<h2 id="第四章-递归"><a href="#第四章-递归" class="headerlink" title="第四章 递归"></a>第四章 递归</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">在解决现实问题时,有的时候需要用到一个方法调用自身的方法,也就是自己调用自己,我们把这种调用方式叫做递归调用</span><br></pre></td></tr></table></figure>

<table>
    <tbody>
        <tr>
            <td>
                <img src="https://note.youdao.com/yws/api/personal/file/WEB032d85267478c6a8363a2d41187ddbe2?method=download&shareKey=b7f23c9143e675f22b7aed3be0fd71a3">
            </td>
            <td>
                <img src="https://note.youdao.com/yws/api/personal/file/WEB7445eb4c90931367b493060c0c535297?method=download&shareKey=5137fcea1433cd55960e33fa1fe53d8b">
            </td>
        </tr>
    </tbody>
</table>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>05-方法</category>
      </categories>
      <tags>
        <tag>方法</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>08_权限,异常和常用类</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/08_%E6%9D%83%E9%99%90,%E5%BC%82%E5%B8%B8%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>08_权限,异常和常用类</category>
      </categories>
      <tags>
        <tag>权限</tag>
        <tag>异常</tag>
        <tag>常用类</tag>
      </tags>
  </entry>
  <entry>
    <title>06-数组</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/06_%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-数组概述"><a href="#第一章-数组概述" class="headerlink" title="第一章 数组概述"></a>第一章 数组概述</h2><span id="more"></span>

<ul>
<li>数组介绍</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 数组是多个相同类型数据的组合</span><br><span class="line"><span class="bullet">2.</span> 数组中的元素可以是任何数据类型,包括基本数据类型和引用数据类型</span><br><span class="line"><span class="bullet">3.</span> 数组属引用类型,数组中的每个元素相当于该对象的成员变量</span><br><span class="line"><span class="bullet">4.</span> 数组中的数据是有序的,可以通过序号(索引或者下标)获取,索引从0开始</span><br></pre></td></tr></table></figure>

<ul>
<li>数组分类</li>
</ul>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">一维数组</span><br><span class="line">二维数组</span><br><span class="line"><span class="meta prompt_">...</span></span><br><span class="line">多维数组</span><br></pre></td></tr></table></figure>

<h2 id="第二章-一维数组"><a href="#第二章-一维数组" class="headerlink" title="第二章 一维数组"></a>第二章 一维数组</h2><h3 id="第1节-声明和初始化"><a href="#第1节-声明和初始化" class="headerlink" title="第1节 声明和初始化"></a>第1节 声明和初始化</h3><ul>
<li>一维数组的声明</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">声明方式: <span class="selector-tag">type</span><span class="selector-attr">[]</span> <span class="selector-tag">var</span>; <span class="selector-tag">type</span> <span class="selector-tag">var</span><span class="selector-attr">[]</span>;  中括号表示的是声明一个数组,<span class="selector-tag">type</span>表示的是数组中存储数据的类型</span><br><span class="line">举例:    <span class="selector-tag">int</span><span class="selector-attr">[]</span> <span class="selector-tag">arr</span>; <span class="selector-tag">int</span> <span class="selector-tag">arr</span><span class="selector-attr">[]</span>;<span class="selector-tag">String</span><span class="selector-attr">[]</span> <span class="selector-tag">strs</span>; <span class="selector-tag">String</span> <span class="selector-tag">strs</span><span class="selector-attr">[]</span>;</span><br><span class="line">注意:    类型可以基本类型也可以是引用类型</span><br></pre></td></tr></table></figure>

<ul>
<li>一维数组的初始化</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 动态初始化: 数组声明且为数组元素分配空间与赋值的操作分开进行</span><br><span class="line">  <span class="attribute">int</span>[] arr = new int[<span class="number">3</span>];    //创建数组对象使用new关键字,并且初始化数组长度</span><br><span class="line">  <span class="attribute">arr</span>[<span class="number">0</span>] = <span class="number">3</span>; //数组是一个集合,里面存储的数据都有索引或者叫做下标</span><br><span class="line">  <span class="attribute">arr</span>[<span class="number">1</span>] = <span class="number">9</span>;  //使用下标给数组赋值</span><br><span class="line">  <span class="attribute">arr</span>[<span class="number">2</span>] = <span class="number">8</span>; //索引从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line"><span class="attribute">2</span>. 静态初始化: 在定义数组的同时就为数组元素分配空间并赋值</span><br><span class="line">  <span class="attribute">int</span> a[] = new int[]&#123; <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>&#125;; //在初始化数组的时候直接赋值,不设置长度</span><br><span class="line">  <span class="attribute">int</span>[] a = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;//在初始化数组的时候直接赋值,省略new</span><br><span class="line">  </span><br><span class="line"><span class="attribute">3</span>. 数组长度的获取</span><br><span class="line">	<span class="attribute">int</span> arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	<span class="attribute">int</span> len = arr.length;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-练习"><a href="#第2节-练习" class="headerlink" title="第2节 练习"></a>第2节 练习</h3><ul>
<li>案例1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求数据元素的最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line">  <span class="type">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">      <span class="comment">//交换</span></span><br><span class="line">      max=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;最大值为:&quot;</span>+max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求数据元素的最小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line">  <span class="type">int</span> min=arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&lt;min)&#123;</span><br><span class="line">      <span class="comment">//交换</span></span><br><span class="line">      min=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;最小值为:&quot;</span>+min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求总和和平均值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//总和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum+=arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;总和:&quot;</span>+sum);</span><br><span class="line">  System.out.println(<span class="string">&quot;平均值:&quot;</span>+sum/arr.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组复制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line">  <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr1[i]=arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i : arr1) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;--&gt;&quot;</span>+i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组的反转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">15</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> temp=arr[i];</span><br><span class="line">    arr[i]=arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">    arr[arr.length-<span class="number">1</span>-i]=temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//反转后</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例3(数组元素的排序)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> temp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIndex=i;<span class="comment">//最小值索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex]&gt;arr[j])&#123;</span><br><span class="line">                minIndex=j; <span class="comment">//交换索引</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[minIndex];</span><br><span class="line">        arr[minIndex]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例4</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二分查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">25</span>&#125;;</span><br><span class="line">        System.out.println(searchRecursion(arr,<span class="number">25</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr: 被查找的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key: 要查找的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> : 返回查找数据的索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">searchRecursion</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="comment">//开始索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//结束索引</span></span><br><span class="line">        <span class="type">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(key==arr[middle])&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&lt;arr[middle])&#123;</span><br><span class="line">                right = middle-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&gt;arr[middle])&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三章-二维数组"><a href="#第三章-二维数组" class="headerlink" title="第三章 二维数组"></a>第三章 二维数组</h2><h3 id="第1节-声明和初始化-1"><a href="#第1节-声明和初始化-1" class="headerlink" title="第1节 声明和初始化"></a>第1节 声明和初始化</h3><ul>
<li>二维数组介绍</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">一维数组中存储的是一维数组 声明的语法  type<span class="selector-attr">[]</span><span class="selector-attr">[]</span> arr;或者 type<span class="selector-attr">[]</span> arr<span class="selector-attr">[]</span>;(这种方式不常见)</span><br></pre></td></tr></table></figure>

<ul>
<li>二维数组声明和初始化</li>
</ul>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">动态初始化</span><br><span class="line">  方式一: int[][] arr  = new int[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">  定义一个arr的二维数组,二维数组中有<span class="number">3</span>个一维数组,每一个一维数组中有<span class="number">2</span>个元素</span><br><span class="line">  二维数组中的一维数组 arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>],给第一个一维数组的<span class="number">1</span>下标赋值 arr[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  方式二: int[][] arr = new int[<span class="number">3</span>][];</span><br><span class="line">  定义一个arr的二维数组,二维数组中有<span class="number">3</span>个一维数组,一维数组的长度自己定义</span><br><span class="line">  可以给三个一维数组分别初始化arr[<span class="number">0</span>] = new int[<span class="number">2</span>];arr[<span class="number">1</span>]=new int[<span class="number">3</span>];arr[<span class="number">2</span>]=new int[<span class="number">4</span>]; </span><br><span class="line"></span><br><span class="line">  注意: int[][] arr = new int[][<span class="number">3</span>] //非法</span><br><span class="line"></span><br><span class="line">静态初始化   </span><br><span class="line">  方式一 int[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">  方式二 int[][] arr =new int[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">  </span><br><span class="line">  注意： 如果静态初始化时,先声明后初始化就会编译错误.</span><br><span class="line">  			int[][] arr;</span><br><span class="line">  			arr=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>&#125;,&#123;<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-练习-1"><a href="#第2节-练习-1" class="headerlink" title="第2节 练习"></a>第2节 练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//杨辉三角</span></span><br><span class="line"><span class="comment">//1. 第一步</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">      System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 第二步</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 0</span></span><br><span class="line"><span class="comment">  * 0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  * 0	0	0	0	0	0	0	0	0	0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 第三步</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1</span></span><br><span class="line"><span class="comment">  * 1	1</span></span><br><span class="line"><span class="comment">  * 1	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	0	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	0	0	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	0	0	0	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	0	0	0	0	0	1</span></span><br><span class="line"><span class="comment">  * 1	0	0	0	0	0	0	0	0	1</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">0</span> || i==j)&#123;</span><br><span class="line">        arr[i][j]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.第四步</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1</span></span><br><span class="line"><span class="comment">  * 1	1</span></span><br><span class="line"><span class="comment">  * 1	2	1</span></span><br><span class="line"><span class="comment">  * 1	3	3	1</span></span><br><span class="line"><span class="comment">  * 1	4	6	4	1</span></span><br><span class="line"><span class="comment">  * 1	5	10	10	5	1</span></span><br><span class="line"><span class="comment">  * 1	6	15	20	15	6	1</span></span><br><span class="line"><span class="comment">  * 1	7	21	35	35	21	7	1</span></span><br><span class="line"><span class="comment">  * 1	8	28	56	70	56	28	8	1</span></span><br><span class="line"><span class="comment">  * 1	9	36	84	126	126	84	36	9	1</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">0</span> || i==j)&#123;</span><br><span class="line">        arr[i][j]=<span class="number">1</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>06-数组</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>09_集合和File类</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/09_%E9%9B%86%E5%90%88%E5%92%8CFile%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>09_集合和File类</category>
      </categories>
      <tags>
        <tag>集合</tag>
        <tag>File类</tag>
      </tags>
  </entry>
  <entry>
    <title>07-面向对象编程</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/07_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-面向对象和面向过程"><a href="#第一章-面向对象和面向过程" class="headerlink" title="第一章 面向对象和面向过程"></a>第一章 面向对象和面向过程</h2><span id="more"></span>


<table>
    <tbody>
        <tr>
            <td style="font-size: 10px;">
                面向对象(OOP[Object Oriented Programming])和面向过程(POP[procedure oriented programming])都是一种软件编程设计思想<br/>
                1. 面向过程强调功能行为<br/>
                2. 面向对象是将功能封装进对象,强调具备了功能的对象<br/>
                3. 面向对象强调运用人类在日常的思维逻辑中采用的思想方法与原则解决问题
            </td>
        </tr>
    </tbody>
</table>

<h3 id="第1节-面向过程"><a href="#第1节-面向过程" class="headerlink" title="第1节 面向过程"></a>第1节 面向过程</h3><table>
    <tbody>
        <tr>
            <td>
                <img style="width: 178px;" src="https://note.youdao.com/yws/api/personal/file/WEB68bd30f60d5077e7d4be5a468f76fe33?method=download&shareKey=f40f8bbffde7659ebcd2001d49e404fd">
            </td>
            <td>
                <img style="width: 178px;" src="https://note.youdao.com/yws/api/personal/file/WEB45bbf70bce655b2a740c039781acad2a?method=download&shareKey=5e7f7d9acd4f6818ac594df146d2c114">
            </td>
            <td>
                <img style="width: 178px;" src="https://note.youdao.com/yws/api/personal/file/WEBc976f01c97100f00a8767a9b20be90a9?method=download&shareKey=5340accefa4f134e6af1fd2f6f750de5">
            </td>
        </tr>
    </tbody>
</table>

<h3 id="第2节-面向对象"><a href="#第2节-面向对象" class="headerlink" title="第2节 面向对象"></a>第2节 面向对象</h3><table>
    <tbody>
        <tr>
            <td>
                <img style="width: 178px;" src="https://note.youdao.com/yws/api/personal/file/WEB68bd30f60d5077e7d4be5a468f76fe33?method=download&shareKey=f40f8bbffde7659ebcd2001d49e404fd">
            </td>
            <td>
                <img style="width: 178px;" src="https://note.youdao.com/yws/api/personal/file/WEB25840c515cc499499fcd7e92838c9f27?method=download&shareKey=c44aae533dd202ba7ecd0113528150fa">
            </td>
            <td>
                <img style="width: 178px;" src="https://note.youdao.com/yws/api/personal/file/WEBc976f01c97100f00a8767a9b20be90a9?method=download&shareKey=5340accefa4f134e6af1fd2f6f750de5">
            </td>
        </tr>
    </tbody>
</table>


<h2 id="第二章-类和对象"><a href="#第二章-类和对象" class="headerlink" title="第二章 类和对象"></a>第二章 类和对象</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Java语言是一门面向对象的语言,那么Java怎么实现的面向对象呢？</span></span><br><span class="line"><span class="keyword"></span>类和对象是<span class="keyword">Java语言实现面向对象的核心</span></span><br></pre></td></tr></table></figure>

<h3 id="第1节-类"><a href="#第1节-类" class="headerlink" title="第1节 类"></a>第1节 类</h3><blockquote>
<p>类的介绍</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">描述现实生活中一类事物的总称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>类的语法格式</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">[修饰符] <span class="keyword">class</span> 类名&#123;</span><br><span class="line">	<span class="comment">//类体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1.</span> 修饰符包括权限修饰符(<span class="keyword">public</span>,<span class="keyword">protected</span>,<span class="keyword">private</span>,默认)还有其他修饰符(<span class="keyword">static</span>,<span class="keyword">final</span>)</span><br><span class="line"><span class="number">2.</span> <span class="keyword">class</span>关键字,声明类的关键字</span><br><span class="line"><span class="number">3.</span> 类名:自定义,满足标识符命名原则</span><br></pre></td></tr></table></figure>

<blockquote>
<p>类的描述</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">使用类描述现实生活中的对象</span><br><span class="line">类描述人</span><br><span class="line">类描述车</span><br><span class="line">类描述狗</span><br></pre></td></tr></table></figure>

<table>
    <tbody>
        <tr>
            <td style="width: 50%;">
                <img src="https://note.youdao.com/yws/api/personal/file/WEB506810e9c3e1ecc721a8a2350fdcbe9b?method=download&shareKey=a464b6f35a85c1b14f2bb6b00baf763c">
            </td>
            <td style="width: 50%;font-size: 12px;">
                按照我们人类的自然思维,你是怎么知道他是一条狗的,凭什么认为它是一条狗,而不是一台汽车.
            </td>
        </tr>
        <tr>
            <td colspan="2" style="font-size: 12px;">
                我们人类之所以能够分辨现实生活中的各个对象,比如看见汽车就知道他是汽车,看见狗就知道它是一条狗,是因为每一个对象都有他独有的特点,以及功能.这种现实生活中分辨对象的的特点和功能在Java语言中我们称之为属性(成员变量)和行为(方法或者函数).
            </td>
        </tr>
    </tbody>
</table>



<blockquote>
<p>案例一(描述人)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 描述人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="comment">//名字</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="comment">//性别</span></span><br><span class="line">	String gender;</span><br><span class="line">	<span class="comment">//国籍</span></span><br><span class="line">	String nationality;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;跑...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;跳...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>案例二(描述车)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 描述车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">	<span class="comment">//品牌</span></span><br><span class="line">	String brand;</span><br><span class="line">	<span class="comment">//颜色</span></span><br><span class="line">	String color;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">driver</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;驾驶...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>案例三(描述狗)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 描述狗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">	<span class="comment">//名字</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="comment">//颜色</span></span><br><span class="line">	String color;</span><br><span class="line">	<span class="comment">//性别</span></span><br><span class="line">	String gender;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;狗吃骨头...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-对象"><a href="#第2节-对象" class="headerlink" title="第2节 对象"></a>第2节 对象</h3><blockquote>
<p>对象的介绍</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">类的具体实例</span><br></pre></td></tr></table></figure>

<table>
    <tbody>
        <tr>
            <td style="width: 50%;">
                <img src="https://note.youdao.com/yws/api/personal/file/WEBd251d47af25ad508e55735843720a5b9?method=download&shareKey=e3df4f2e702fb5d40e4e8d99156ebc39">
            </td>
            <td style="font-size: 12px;width: 50%;">
                可以将车的设计图看成类,类的设计决定了对象的功能,所以Java语言设计其实就是类设计<br/>
                将具体的车看成对象<br/>
                对象是根据类得到的
            </td>
        </tr>
    </tbody>
</table>



<blockquote>
<p>对象的创建方式</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">使用<span class="keyword">new</span><span class="type"></span>关键字进行对象创建</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象创建的语法</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type"></span>类名()   对象创建的方式<span class="keyword">new</span><span class="type"></span>关键字加上类名在加一对小括号  </span><br><span class="line"></span><br><span class="line">eg:<span class="type"></span></span><br><span class="line">Person p = <span class="keyword">new</span> <span class="type">Person</span>();</span><br><span class="line">Car c = <span class="keyword">new</span> <span class="type">Car</span>();</span><br><span class="line">Dog d = <span class="keyword">new</span> <span class="type">Dog</span>();</span><br></pre></td></tr></table></figure>

<h3 id="第3节-类成员之三构造器"><a href="#第3节-类成员之三构造器" class="headerlink" title="第3节 类成员之三构造器"></a>第3节 类成员之三构造器</h3><blockquote>
<p>构造器语法</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[修饰符]</span> 类名(参数列表)&#123;</span><br><span class="line">	<span class="comment">//初始化语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造器的作用</p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">创建对象,给对象进行初始化.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造器的调用</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 使用关键字<span class="keyword">new</span><span class="type"></span>调用构造方法</span><br><span class="line"><span class="number">2.</span> 在类的内部使用<span class="built_in">this</span>关键字调用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造器的分类</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">根据参数不同,构造器分为如下两类</span><br><span class="line"><span class="bullet">1.</span> 隐式无参构造器(系统默认提供)</span><br><span class="line"><span class="bullet">2.</span> 显示定义一个或多个构造器(无参、有参)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造器特点</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Java语言中,每个类都至少有一个构造器</span><br><span class="line"><span class="bullet">2.</span> 默认构造器的修饰符与所属类的修饰符一致</span><br><span class="line"><span class="bullet">3.</span> 一旦显式定义了构造器,则系统不再提供默认构造器</span><br><span class="line"><span class="bullet">4.</span> 一个类可以创建多个重载构造器</span><br><span class="line"><span class="bullet">5.</span> 父类的构造器不可被子类继承(后面在继承的时候演示)</span><br></pre></td></tr></table></figure>

<h3 id="第4节-this关键字"><a href="#第4节-this关键字" class="headerlink" title="第4节 this关键字"></a>第4节 this关键字</h3><blockquote>
<p>this介绍</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>代表当前类的对象,可以使用<span class="keyword">this</span>调用类中的成员,比如属性、方法、构造方法等.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>this举例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. this调用当前类中的属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String userName, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//this用在构造方法中给成员变量进行初始化</span></span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. this调用当前类中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName+<span class="string">&quot;--&gt;&quot;</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//使用this调用当前类中的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. this调用当前类中的构造方法(构造方法也是方法,所以this也可以调用)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String userName, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//this调用一个参数的构造方法</span></span><br><span class="line">        <span class="built_in">this</span>(userName);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第5节-package和import"><a href="#第5节-package和import" class="headerlink" title="第5节 package和import"></a>第5节 package和import</h3><blockquote>
<p>package介绍</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 在Java语言中为了更好的实现项目中的类的管理,Java语言提出了包的概念.</span><br><span class="line"><span class="bullet">2.</span> 使用package声明类所属的包,声明必须在.java源文件的首行.</span><br><span class="line"><span class="bullet">3.</span> 包属于标识符,在命名的时候要符合标识符的命名规范.</span><br><span class="line"><span class="bullet">4.</span> 每点(.)一次在计算机上就代表着一层文件夹目录</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JDK中自带包介绍</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> java.lang</span><br><span class="line"><span class="bullet">2.</span> java.io</span><br><span class="line"><span class="bullet">3.</span> java.util</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自定义包</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ukoko; <span class="comment">//当前Hello类属于cn.ukoko包下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    publlic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;Hello...&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>import介绍</p>
</blockquote>
<table>
    <tbody>
        <tr>
            <td style="width:60%;">
                <img src="https://note.youdao.com/yws/api/personal/file/WEB5c7945e0a0bd6c62fb20c0a5e6210bf4?method=download&shareKey=8893b6b4db9b8d050a4f717fc6b2b98d">
            </td>
            <td style="font-size:12px;">
                如果在一个包下的类中使用了另一个包中的类,那么需要使用import关键字进行导入(除了java.lang包)
            </td>
        </tr>
    </tbody>
</table>

<h2 id="第三章-类的高级特性一"><a href="#第三章-类的高级特性一" class="headerlink" title="第三章 类的高级特性一"></a>第三章 类的高级特性一</h2><h3 id="第1节-static和final"><a href="#第1节-static和final" class="headerlink" title="第1节 static和final"></a>第1节 static和final</h3><blockquote>
<p>static修饰符</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>可以修饰类、属性、方法、代码块,不能修饰构造方法,修饰类只能修饰内部类</span><br><span class="line"></span><br><span class="line">在日常开发中最常见的是使用<span class="keyword">static</span>修饰属性和方法,像修饰代码块以及内部类很少见.</span><br><span class="line"></span><br><span class="line">被<span class="keyword">static</span>修饰的属性和方法的特点:</span><br><span class="line"><span class="number">1.</span> 被<span class="keyword">static</span>修饰的属性叫做类属性,直接类名.属性名方式调用,不需要创建对象之后使用对象名.属性调用.</span><br><span class="line"><span class="number">2.</span> 被<span class="keyword">static</span>修饰的方法叫做类方法,直接类名.方法名方式调用,不需要创建对象之后使用对象名.方法名调用.</span><br><span class="line"><span class="number">3.</span> <span class="keyword">static</span>修饰的方法中不能使用<span class="keyword">this</span>,因为<span class="keyword">static</span>是随着类加载而被加载,<span class="keyword">this</span>是对着对象创建而创建,类要比对象优先存在.</span><br><span class="line"><span class="number">4.</span> 静态可以访问静态,静态不能访问非静态.</span><br><span class="line"><span class="number">5.</span> 非静态可以访问静态.</span><br><span class="line"><span class="number">6.</span> 静态变量由于属于类而不是属于对象,所以<span class="keyword">static</span>修饰的变量在内存中只存在一份,被当前类的所有对象共享.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>static案例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="comment">//修饰属性</span></span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//代码块</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//修饰方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//内部类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>final修饰符</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span>可以修饰类、属性、方法以及方法入参,不能修饰构造方法</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">final</span>修饰的类不能被继承</span><br><span class="line"><span class="number">2.</span> <span class="keyword">final</span>修饰的属性不能被<span class="number">2</span>次赋值(常量)</span><br><span class="line"><span class="number">3.</span> <span class="keyword">final</span>修饰的方法不能被重写</span><br></pre></td></tr></table></figure>

<blockquote>
<p>final案例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修饰类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="comment">//修饰属性</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//修饰方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> a)</span> &#123; <span class="comment">//修饰方法入参</span></span><br><span class="line">		<span class="comment">//修饰局部变量</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-类成员之四代码块"><a href="#第2节-类成员之四代码块" class="headerlink" title="第2节 类成员之四代码块"></a>第2节 类成员之四代码块</h3><blockquote>
<p>代码块</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态代码块</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态代码块,代码块,构造方法的执行顺序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是代码块...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      	<span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建3个对象</span></span><br><span class="line"><span class="comment">         * 1. 静态代码块只执行了一次,代码块和构造方法每次创建对象都会被执行</span></span><br><span class="line"><span class="comment">         * 2. 静态代码块最先被执行</span></span><br><span class="line"><span class="comment">         * 3. 代码块比构造方法先执行</span></span><br><span class="line"><span class="comment">         */</span>	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第3节-面向对象三大特性"><a href="#第3节-面向对象三大特性" class="headerlink" title="第3节 面向对象三大特性"></a>第3节 面向对象三大特性</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">面向对象三大特性: 封装、继承、多态</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-封装"><a href="#3-1-封装" class="headerlink" title="3.1 封装"></a>3.1 封装</h4><blockquote>
<p>封装介绍</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">封装字面意思就是包装,专业点叫做隐藏,在Java语言中就是对属性和行为的隐藏.</span><br><span class="line"></span><br><span class="line">Java语言提供了四种权限修饰符(<span class="keyword">private</span>,缺省,<span class="keyword">protected</span>,<span class="keyword">public</span>)可以修饰Java的属性和行为,其中<span class="keyword">private</span>修饰符帮助我们完成封装</span><br></pre></td></tr></table></figure>

<blockquote>
<p>没有封装</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		p.name=<span class="string">&quot;李雷&quot;</span>;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 赋值没问题,整数类型</span></span><br><span class="line"><span class="comment">		 * 但是不符合现实,现实中人不可能活200岁</span></span><br><span class="line"><span class="comment">		 * 可不可以想一种办法,将这个age属性隐藏起来让p.name找不到,这样就不会被随便赋值了</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		p.age=<span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用封装</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		p.name=<span class="string">&quot;李雷&quot;</span>;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 属性私有化,age变量的作用范围只能在当前类中有效</span></span><br><span class="line"><span class="comment">		 * 所以在TestDemo01类中访问不到age</span></span><br><span class="line"><span class="comment">		 * 但是我还想给age赋值应该怎么办呢?</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//p.age=200;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="comment">//私有化属性</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 私有化属性之后提供set方法给私有化属性赋值</span></span><br><span class="line"><span class="comment">	 * 使用方法赋值可以灵活的校验所传递的参数是否合法</span></span><br><span class="line"><span class="comment">	 * 然后判断是否给属性赋值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(age&lt;<span class="number">0</span> &amp;&amp; age&lt;=<span class="number">120</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.age = age;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;输入的年龄不合法....&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>封装的优势</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 重用: 封装好一个功能类,对外提供使用细节,不必关心内部实现</span><br><span class="line"><span class="bullet">2.</span> 安全: 私有化属性,有些不能给用户看的就不需要给用户看,只把能给用户看的显示出来</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4个权限修饰详解</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Java语言提供了四个权限修饰符分别为 <span class="keyword">private</span>,缺省,<span class="keyword">protected</span>,<span class="keyword">public</span></span><br><span class="line">四个修饰符的权限范围为:</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>修饰符</th>
<th>类内部</th>
<th>同一个包</th>
<th>子类</th>
<th>任何地方</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>default</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>protected</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>public</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
</tbody></table>
<h4 id="3-2-继承"><a href="#3-2-继承" class="headerlink" title="3.2 继承"></a>3.2 继承</h4><blockquote>
<p>继承的介绍</p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">继承和现实生活中的<span class="string">&quot;继承&quot;</span>的相似之处是保留一些父辈的特性,从而减少代码冗余,提高代码的可重用性.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的语法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用关键字extends实现两个类之间的继承关系</span></span><br><span class="line"><span class="comment"> * Person表示父类或者基类或者超类</span></span><br><span class="line"><span class="comment"> * Student表示子类或者派生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
    <tbody>
        <tr>
            <td style="width: 50%;">
                <img src="https://note.youdao.com/yws/api/personal/file/WEB9f17677471d035fea999bc6e897544bf?method=download&shareKey=c3c04f2e7c15871d2d5142eef42a4cd5">
            </td>
            <td style="width: 50%;font-size: 12px;">
                一个父类可以派生出多个子类,但是一个子类只能有一个父类<br/>
                Java语言不支持多继承,但是支持多层继承
            </td>
        </tr>
    </tbody>
</table>


<blockquote>
<p>继承的特点</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 子类继承了父类,就继承了父类的方法和属性</span><br><span class="line"><span class="bullet">2.</span> 在子类中,可以使用父类中定义的方法和属性,也可以创建新的属性和方法</span><br><span class="line"><span class="bullet">3.</span> 子类不能直接访问父类中私有的(private)的成员变量和方法</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法重写</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在子类中可以根据需要对从父类中继承来的方法进行改造,也称方法的重写或者叫覆盖.在程序执行时,子类的方法将覆盖父类的方法.</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 重写方法必须和被重写方法具有相同的方法名称、参数列表和返回值类型</span><br><span class="line"><span class="bullet">2.</span> 重写方法不能使用比被重写方法更严格的访问权限</span><br><span class="line"><span class="bullet">3.</span> 重写和被重写的方法须同时为static的,或同时为非static的</span><br><span class="line"><span class="bullet">4.</span> 子类方法抛出的异常不能大于父类被重写方法的异常</span><br></pre></td></tr></table></figure>

<blockquote>
<p>super</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">在<span class="title class_">Java</span>类中使用<span class="variable language_">super</span>来调用父类中的指定操作</span><br><span class="line"><span class="number">1.</span> <span class="variable language_">super</span>可用于访问父类中定义的属性</span><br><span class="line"><span class="number">2.</span> <span class="variable language_">super</span>可用于调用父类中定义的成员方法</span><br><span class="line"><span class="number">3.</span> <span class="variable language_">super</span>可用于在子类构造方法中调用父类的构造器</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line"><span class="number">1.</span> 当子父类出现同名成员时,可以用<span class="variable language_">super</span>进行区分</span><br><span class="line"><span class="number">2.</span> <span class="variable language_">super</span>的追溯不仅限于直接父类,祖宗类也可以</span><br><span class="line"><span class="number">3.</span> <span class="variable language_">super</span>和<span class="variable language_">this</span>的用法相像,<span class="variable language_">this</span>代表本类对象的引用,<span class="variable language_">super</span>代表父类的内存空间的标识</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        B b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&quot;李雷&quot;</span>,<span class="string">&quot;北京大学&quot;</span>);</span><br><span class="line">        <span class="title class_">String</span> info = b.<span class="title function_">getInfo</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">C</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span>(<span class="params"><span class="built_in">String</span> name,<span class="built_in">String</span> school</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(school);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">&quot;的学校为:&quot;</span>+<span class="variable language_">super</span>.<span class="title function_">getInfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span>(<span class="params"><span class="built_in">String</span> school</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">school</span> = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>子类的实例化过程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * c...</span></span><br><span class="line"><span class="comment"> * b...</span></span><br><span class="line"><span class="comment"> * 上面是实例化子类的结果</span></span><br><span class="line"><span class="comment"> * 1. 在实例化子类的时候父类先被实例化</span></span><br><span class="line"><span class="comment"> * 2. 默认都不添加构造方法的情况下子类的无参构造方法调用父类的无参构造方法super();</span></span><br><span class="line"><span class="comment"> * 3. 如果父类添加有参构造方法并且覆盖了原有的默认无参构造方法,那么子类也必须有对应的构造方法,调用现有的有参构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//实例化子类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;c...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-多态"><a href="#3-3-多态" class="headerlink" title="3.3 多态"></a>3.3 多态</h4><blockquote>
<p>多态的产生</p>
</blockquote>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">Java语言编写的代码,从编写到运行要经历的步骤: Xxx.java  <span class="params">-javac</span>- Xxx.class <span class="params">-java</span>- 运行</span><br><span class="line"></span><br><span class="line">编译时期类型检测: 编译时类型由声明该变量时使用的类型决定.</span><br><span class="line">运行时期类型检测: 运行时类型由实际赋给该变量的对象决定.</span><br><span class="line"></span><br><span class="line">上面两句话总结成一句话就是: 编译看左侧,运行看右侧.</span><br><span class="line"></span><br><span class="line">下面我们举一个例子:</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有多态</span></span><br><span class="line">①  <span class="built_in">String</span> s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">②  <span class="built_in">boolean</span> f=s.<span class="keyword">equals</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">编译的时候看左侧①中声明一个<span class="built_in">String</span>类型的变量,起名为s;②中的s是<span class="built_in">String</span>类型,这个类中有<span class="keyword">equals</span>方法,所以编译通过</span><br><span class="line">运行的时候看右侧①中在内存中开辟一个空间存储<span class="string">&quot;Hello&quot;</span>值;②中的s对象是<span class="string">&quot;Hello&quot;</span>和另一个<span class="string">&quot;Hello比较&quot;</span>,所以运行通过</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用多态</span></span><br><span class="line">Animal a=<span class="literal">new</span> Bird(); <span class="comment">//如果成立,那么这就属于多态</span></span><br><span class="line">根据咱们前面学习的知识右侧对象的类型一定要和左侧的类型相同,这时候编译才能通过,但是如果等号左右两侧类型不相同,编译器也可以通过,这就出现了多态;当前多态是有前提条件的.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多态产生的原因</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 等号左右两侧的数据类型满足继承的关系.</span></span><br><span class="line"><span class="comment"> * 2. 等号左侧的数据类型是右侧对象数据类型的超类类型.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">C</span>();<span class="comment">//父类引用指向子类对象(多态使用)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基本类型变量和引用数据类型变量区别</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">基本数据类型: int <span class="attribute">a</span>=100;一个变量值只能有一个确定的数据类型,所以不能使用多态</span><br><span class="line">引用数据类型: </span><br><span class="line">	Animal <span class="attribute">a1</span>=new Bird();Animal <span class="attribute">a2</span>=new Dog();</span><br><span class="line">	Java虽然不能多继承,但是能多层继承,所以一个父类可以派生出多个子类</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多态的局限</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果父类在派生出来的子类中新添加了属性或者方法,那么在使用多态时,该变量就不能再访问子类中添加的属性和方法.</span></span><br><span class="line"><span class="comment"> * 如果一定要调用子类中新增的属性或者方法,那么可以使用向上转型的方式进行造型.因为父类引用指向的是子类对象,也</span></span><br><span class="line"><span class="comment"> * 就是说父类的变量值就是子类的对象,这是可以对这个变量进行向上转型,转成子类.B b=new C(); C c2=(C)b;造型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">C</span>();<span class="comment">//父类引用指向子类对象(多态使用)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> b.b;<span class="comment">//编译通过</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> b.c;<span class="comment">//编译不通过,编译看左侧,左侧b对应所在的类中没有c这个属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> c=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四章-类的高级特性二"><a href="#第四章-类的高级特性二" class="headerlink" title="第四章 类的高级特性二"></a>第四章 类的高级特性二</h2><h3 id="第1节-抽象类"><a href="#第1节-抽象类" class="headerlink" title="第1节 抽象类"></a>第1节 抽象类</h3><blockquote>
<p>抽象类介绍</p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">抽象类又称为模板类,在类的继承中,随着新子类的建立,子类会越来越具体,相比于子类,父类会变的越来越通用.</span><br><span class="line">有时候为了让父类更通用,父类会设计的特别抽象,以至于没有具体实例(就算创建了对象,这个对象也不能具体表示现实生活中的哪个对象).这样的类我们叫它抽象类.</span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEB5fc78f1379882274df524f6c289916ab?method=download&shareKey=a690c586c90980095c189a8b215602e1">



<blockquote>
<p>abstract关键字</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 用<span class="keyword">abstract</span>关键字来修饰一个类时,这个类叫做抽象类</span><br><span class="line"><span class="number">2.</span> 用<span class="keyword">abstract</span>来修饰一个方法时,该方法叫做抽象方法,抽象方法只有方法声明,没有方法体.</span><br><span class="line">	 eg: <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">abstractMethod</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="number">3.</span> 含有抽象方法的类必须被声明为抽象类</span><br><span class="line"><span class="number">4.</span> 抽象类不能被实例化.抽象类是用来被继承的,抽象类的子类必须重写父类的抽象方法,并提供方法体.若没有重写全部的抽象方法,仍为抽象类.</span><br><span class="line"><span class="number">5.</span> 不能用<span class="keyword">abstract</span>修饰属性、私有方法、构造器、静态方法、<span class="keyword">final</span>的方法</span><br><span class="line"><span class="number">6.</span> 抽象类的成员和普通类设计相同</span><br></pre></td></tr></table></figure>

<blockquote>
<p>抽象类的应用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-接口"><a href="#第2节-接口" class="headerlink" title="第2节 接口"></a>第2节 接口</h3><blockquote>
<p>接口介绍</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有时必须从几个类中派生出一个子类,继承它们所有的属性和方法.但是,Java不支持多重继承.有了接口,就可以得到多重继承的效果</span><br><span class="line"><span class="bullet">2.</span> 接口(interface)是抽象方法和常量值的定义的集合</span><br><span class="line"><span class="bullet">3.</span> 从本质上讲,接口是一种特殊的抽象类,这种抽象类中只包含常量和方法的定义,而没有变量和方法的实现</span><br><span class="line"><span class="bullet">4.</span> 一个类可以实现多个接口,接口也可以继承其它接口</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接口特点</p>
</blockquote>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 用<span class="keyword">interface</span>来定义</span><br><span class="line"><span class="number">2.</span> 接口中的所有成员变量都默认是由<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>修饰的</span><br><span class="line"><span class="number">3.</span> 接口中的所有方法都默认是由<span class="keyword">public</span> <span class="keyword">abstract</span>修饰的</span><br><span class="line"><span class="number">4.</span> 接口没有构造器</span><br><span class="line"><span class="number">5.</span> 接口采用多继承机制</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接口语法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">int</span> leg=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接口注意事项</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 实现接口的类中必须提供接口中所有方法的具体实现内容,方可实例化.否则,仍为抽象类</span><br><span class="line"><span class="bullet">2.</span> 接口的主要用途就是被实现类实现.（面向接口编程）</span><br><span class="line"><span class="bullet">3.</span> 与继承关系类似,接口与实现类之间存在多态性</span><br></pre></td></tr></table></figure>

<blockquote>
<p>工厂模式&#x2F;代理模式</p>
</blockquote>
<h3 id="第3节-内部类"><a href="#第3节-内部类" class="headerlink" title="第3节 内部类"></a>第3节 内部类</h3><blockquote>
<p>内部类的概念</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">内部类顾名思义就是声明在类的内部的类叫做内部类</span><br></pre></td></tr></table></figure>

<blockquote>
<p>内部类的分类</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 成员内部类</span><br><span class="line"><span class="bullet">2.</span> 静态内部类</span><br><span class="line"><span class="bullet">3.</span> 局部(方法)内部类  使用极少,不做讲解</span><br><span class="line"><span class="bullet">4.</span> 匿名内部类</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么使用内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Java不支持多继承</span></span><br><span class="line"><span class="comment"> * 如果A类想同时继承C类和D类中的方法是不可能的</span></span><br><span class="line"><span class="comment"> * 但是可以使用内部类的方式,间接解决不能多继承问题</span></span><br><span class="line"><span class="comment"> * A类先继承C类,将C类中的sum方法继承到A类中</span></span><br><span class="line"><span class="comment"> * 在A类中创建内部类B,让这个内部类B继承D类,这样D类中的方法就被继承到了B中</span></span><br><span class="line"><span class="comment"> * B类又是A类的成员,这样间接的D类中的方法和C类中的方法都在A类中了.</span></span><br><span class="line"><span class="comment"> * 内部类拥有类的基本特性,不止可以继承还可以实现接口...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">C</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">D</span>&#123;</span><br><span class="line">        </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>内部类的介绍</p>
</blockquote>
<ul>
<li>成员内部类</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 作为类的成员存在,可以被任意权限修饰符修饰</span><br><span class="line"><span class="number">2.</span> 可以调用外部类的所有信息</span><br><span class="line"><span class="number">3.</span> 可以和外部类属性和方法重名,调用时外部类名.<span class="built_in">this</span>.属性/方法即可</span><br><span class="line"><span class="number">4.</span> 外部类调用内部类信息 需要<span class="keyword">new</span> <span class="type"></span>内部类对象使用</span><br><span class="line"><span class="number">5.</span> 其他类调用内部类信息需要创建内部类对象，创建方式:<span class="type"></span></span><br><span class="line">	<span class="number">5.1</span> 先创建外部类对象 A a = <span class="keyword">new</span> <span class="type">A</span>();</span><br><span class="line">	<span class="number">5.2</span> 通过外部类对象创建内部类对象 A.B b = a.<span class="keyword">new</span> <span class="type">B</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> aId=<span class="number">100</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> common=<span class="number">1000</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String aName=<span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">	<span class="comment">//外部实例方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aInstanceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;外部实例方法...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//外部静态方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;外部静态方法...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//成员内部类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> common=<span class="number">1000</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//定义内部类方法</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="comment">//如果内部类属性和外部类属性同名,输出的是内部类属性</span></span><br><span class="line">			System.out.println(<span class="string">&quot;内部common=&quot;</span>+common);</span><br><span class="line">			<span class="comment">//访问外部类属性(与内部类同名)</span></span><br><span class="line">			System.out.println(<span class="string">&quot;外部同名属性common=&quot;</span>+A.<span class="built_in">this</span>.common);</span><br><span class="line">			<span class="comment">//访问外部类非静态属性(与内部类非同名)</span></span><br><span class="line">			System.out.println(<span class="string">&quot;外部类非静态属性(与外部类非同名)aId=&quot;</span>+aId);</span><br><span class="line">			<span class="comment">//访问外部类静态属性(与内部类非同名)</span></span><br><span class="line">			System.out.println(<span class="string">&quot;外部类静态属性(与外部类非同名)aName=&quot;</span>+aName);</span><br><span class="line">			<span class="comment">//访问外部类方法(非静态)</span></span><br><span class="line">			aInstanceMethod();</span><br><span class="line">			<span class="comment">//访问外部类方法(静态)</span></span><br><span class="line">			aStaticMethod();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//外部类方法访问内部类方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aMethos</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//创建内部类对象</span></span><br><span class="line">		<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		<span class="comment">//调用内部类方法</span></span><br><span class="line">		b.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类调用内部类对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//外部类对象</span></span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    <span class="comment">//通过外部类创建内部类对象</span></span><br><span class="line">    A.<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> a.<span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    b.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>静态内部类</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 作为类的静态成员存在,可以被任意权限修饰符修饰</span><br><span class="line"><span class="bullet">2.</span> 只可以调用外部类static相关联的信息</span><br><span class="line"><span class="bullet">3.</span> 外部类使用时 类名.信息即可</span><br><span class="line"><span class="bullet">4.</span> 其他类调用内部类信息时:</span><br><span class="line"><span class="code">	4.1 调用静态内部类静态方法 外部类名.内部类名.内部类静态方法</span></span><br><span class="line"><span class="code">	4.2 调用静态内部类实例方法 外部类名.内部类名 变量名 = new 外部类名.内部类名(); 变量名.内部类方法名</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String aName=<span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//外部类实例方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aInstanceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;外部类实例方法...&quot;</span>);</span><br><span class="line">		<span class="comment">//调用外部类的静态方法</span></span><br><span class="line">		B.bStaticMethod();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//外部类静态方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;外部类静态方法...&quot;</span>);</span><br><span class="line">		<span class="comment">//调用外部类的静态方法</span></span><br><span class="line">		B.bStaticMethod();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态内部类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//内部类实例方法</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="comment">//调用外部类静态属性</span></span><br><span class="line">			System.out.println(<span class="string">&quot;外部类静态属性aName=&quot;</span>+aName);</span><br><span class="line">			<span class="comment">//调用外部类静态方法</span></span><br><span class="line">			aStaticMethod();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//内部类静态方法</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;内部类静态方法...&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//访问静态内部类的静态方法</span></span><br><span class="line">    A.B.bStaticMethod();</span><br><span class="line">    <span class="comment">//访问静态内部类的实例方法</span></span><br><span class="line">    A.<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>.B();</span><br><span class="line">    b.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>局部(方法)内部类</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 声明在方法内部,只能在方法中使用,具备类的基本特性,类前不能有访问权限修饰符</span><br><span class="line"><span class="bullet">2.</span> 不能在类中声明静态信息,因为方法结束后内存需要释放</span><br><span class="line"><span class="bullet">3.</span> 可以直接访问方法的局部变量,但是无法修改</span><br><span class="line"><span class="bullet">4.</span> 可以随意访问外部的所有信息</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>匿名内部类</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">匿名内部类,顾名思义就是没有名字的内部类,咱们上面的内部类不管在类中的什么位置都有名字,匿名内部类却没有名字.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;<span class="meta">@Override</span>&#125;;  <span class="comment">//A是一个接口或者抽象类</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">				System.out.println(x+y);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>07-面向对象编程</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>面向对象三大特性</tag>
        <tag>封装</tag>
        <tag>继承</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>10_字节流,字符流和其他流</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/10_%E5%AD%97%E8%8A%82%E6%B5%81,%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%85%B6%E4%BB%96%E6%B5%81/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>10_字节流,字符流和其他流</category>
      </categories>
      <tags>
        <tag>流</tag>
        <tag>字节流</tag>
      </tags>
  </entry>
  <entry>
    <title>11-多线程</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/11_%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-多线程概述"><a href="#第一章-多线程概述" class="headerlink" title="第一章 多线程概述"></a>第一章 多线程概述</h2><span id="more"></span>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 什么是程序?</span><br><span class="line"><span class="bullet">2.</span> 什么是进程?</span><br><span class="line"><span class="bullet">3.</span> 什么是线程?</span><br></pre></td></tr></table></figure>

<ul>
<li>程序</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">是为完成特定任务、用某种语言编写的一组指令的集合<span class="comment">(一段静态的代码)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进程</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">是程序的一次执行过程，或是正在运行的一个程序</span><br></pre></td></tr></table></figure>

<ul>
<li>线程</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">进程可进一步细化为线程，是一个程序内部的一条执行路径</span><br><span class="line"></span><br><span class="line">若一个程序可同一时间执行多个线程，我们称之为多线程.</span><br></pre></td></tr></table></figure>

<ul>
<li>多线程的使用</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我们在什么情况下使用多线程呢?</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 程序需要同时执行多个任务的时候(2个或2个以上)</span><br><span class="line"><span class="bullet">2.</span> 程序需要实现一些需要等待的任务时(例如360杀毒软件中有很多功能,但是这些功能都没有被调用,都在等待被调)</span><br><span class="line"><span class="bullet">3.</span> 后台运行的程序</span><br></pre></td></tr></table></figure>

<h2 id="第二章-多线程创建和使用"><a href="#第二章-多线程创建和使用" class="headerlink" title="第二章 多线程创建和使用"></a>第二章 多线程创建和使用</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Java线程创建有两种方式</span><br><span class="line"><span class="bullet">1.</span> 一种是继承Thread类</span><br><span class="line"><span class="bullet">2.</span> 一种是实现Runnable接口</span><br></pre></td></tr></table></figure>

<h3 id="第1节-继承Thread类"><a href="#第1节-继承Thread类" class="headerlink" title="第1节 继承Thread类"></a>第1节 继承Thread类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        mt.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写自定义类实现Thread类,重写run方法</span></span><br><span class="line"><span class="comment"> * run方法由jvm虚拟机调用,待抢到CPU资源之后才会执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我被线程调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第2节-实现Runnable接口"><a href="#第2节-实现Runnable接口" class="headerlink" title="第2节 实现Runnable接口"></a>第2节 实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建MyRunnable实例</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我被线程调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三章-线程的优先级"><a href="#第三章-线程的优先级" class="headerlink" title="第三章 线程的优先级"></a>第三章 线程的优先级</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Thread类中自带优先级设置 最小优先级</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Thread类中自带优先级设置 默认优先级</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NORM_PRIORITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Thread类中自带优先级设置 最大优先级</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Thread类中提供了设置和获取优先级的方法</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setPriority</span><span class="params">()</span></span>: 设置优先级(取值范围<span class="number">1</span>-<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="title">getPriority</span><span class="params">()</span></span>: 获取优先级方法</span><br><span class="line"></span><br><span class="line">在线程中设置线程优先级不会出现明显的变化,优先级高的话只是分配到CPU资源的概率高.</span><br></pre></td></tr></table></figure>

<h2 id="第四章-Thread类常用方法"><a href="#第四章-Thread类常用方法" class="headerlink" title="第四章 Thread类常用方法"></a>第四章 Thread类常用方法</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">start</span><span class="params">()</span></span>:线程启动方法</span><br><span class="line"><span class="function"><span class="title">run</span><span class="params">()</span></span>: 线程被调度时执行的方法</span><br><span class="line"><span class="function"><span class="title">getName</span><span class="params">()</span></span>: 返回线程名称</span><br><span class="line"><span class="function"><span class="title">setName</span><span class="params">(String name)</span></span>: 设置线程名称</span><br><span class="line"><span class="function"><span class="title">currentThread</span><span class="params">()</span></span>: 返回当前线程</span><br><span class="line"><span class="function"><span class="title">yield</span><span class="params">()</span></span>: 线程让步</span><br><span class="line">	暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</span><br><span class="line">	若队列中没有同优先级的线程，忽略此方法</span><br><span class="line">	线程让步,不代表暂停执行,就像你在高速开车,让了路,不代表车停下来,让给其他线程,CPU可能还会分配给它资源.</span><br><span class="line"><span class="function"><span class="title">join</span><span class="params">()</span></span>:当某个程序执行中调用其他线程的<span class="built_in">join</span>()方法时,调用线程将被阻塞,直到<span class="built_in">join</span>()方法加入的join线程执行完为止.低优先级的线程也可以获得执行</span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">(long millis)</span></span>: 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队</span><br><span class="line"><span class="function"><span class="title">stop</span><span class="params">()</span></span>: 强制线程生命期结束（已过时）</span><br><span class="line"><span class="function"><span class="title">isAlive</span><span class="params">()</span></span>: 返回boolean,判断线程是否还活着</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//join测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TaskRnnable</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskRnnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();<span class="comment">//join之后必须t1结束之后才能执行t2</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskRnnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;执行了....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第五章-线程的生命周期"><a href="#第五章-线程的生命周期" class="headerlink" title="第五章 线程的生命周期"></a>第五章 线程的生命周期</h2><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">线程的生命周期状态: 创建</span> <span class="literal">--</span> <span class="comment">就绪</span> <span class="literal">--</span> <span class="comment">运行</span> <span class="literal">--</span> <span class="comment">停止</span> <span class="literal">--</span> <span class="comment">阻塞</span></span><br></pre></td></tr></table></figure>

<img width="600" src="https://note.youdao.com/yws/api/personal/file/WEBcac15100195ceaf047af67a1ecf30f56?method=download&shareKey=105fde016ed9ba9b20b24d37061c3737">

<h2 id="第六章-线程同步"><a href="#第六章-线程同步" class="headerlink" title="第六章 线程同步"></a>第六章 线程同步</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">因为多线程执行的不确定性引起执行结果的不稳定性,可能造成数据出现问题.</span><br><span class="line"></span><br><span class="line">Java中引入互斥锁的概念,来保证共享数据操作的完整性.每个对象都对应于一个可称为<span class="string">&quot;互斥锁&quot;</span> 的标记;这个标记用来保证在任一时刻,只能有一个线程访问该对象.</span><br><span class="line"></span><br><span class="line">在Java中使用<span class="keyword">synchronized</span>关键字来实现互斥锁</span><br><span class="line"><span class="number">1.</span> 同步代码块</span><br><span class="line">	锁对象: <span class="number">1.1</span> 实例对象(锁实例数据)  <span class="number">1.2</span> 静态对象(锁静态数据)</span><br><span class="line"><span class="number">2.</span> 同步方法</span><br><span class="line">	<span class="number">2.1</span> 实例方法(锁为<span class="keyword">this</span>)  <span class="number">2.2</span> 静态方法(锁为当前类本身)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟火车站售票程序，开启三个窗口售票</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过这个案例,多次执行会发现他的数据执行顺序是有问题的.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建车票</span></span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="comment">//创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;窗口-&gt; &quot;</span>+ Thread.currentThread().getName() +<span class="string">&quot; &lt;- 买票&quot;</span>+ticket+<span class="string">&quot;剩余票数为:&quot;</span>+ --ticket);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决问题</p>
</blockquote>
<ul>
<li>同步代码块</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (锁对象)&#123;</span><br><span class="line">	<span class="comment">//需要锁定的资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建车票</span></span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="comment">//创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">          	<span class="comment">//锁定共享资源</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;窗口-&gt; &quot;</span>+ Thread.currentThread().getName() +<span class="string">&quot; &lt;- 买票&quot;</span>+ticket+<span class="string">&quot;剩余票数为:&quot;</span>+ --ticket);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>同步方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用synchronized修饰操作共享资源的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建车票</span></span><br><span class="line">        <span class="type">Ticket1</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket1</span>();</span><br><span class="line">        <span class="comment">//创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            sale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//给操作共享资源的方法添加synchronized</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口-&gt; &quot;</span>+ Thread.currentThread().getName() +<span class="string">&quot; &lt;- 买票&quot;</span>+ticket+<span class="string">&quot;剩余票数为:&quot;</span>+ --ticket);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第七章-死锁"><a href="#第七章-死锁" class="headerlink" title="第七章 死锁"></a>第七章 死锁</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">DeadLock</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.flag = flag;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;	</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (obj1) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">&quot;已经锁定obj1&quot;</span>);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//如果出现死锁当前执行不到</span></span><br><span class="line">				<span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;一秒钟后&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;已经锁定obj2&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">&quot;已经锁定obj2&quot;</span>);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//如果死锁访问不到</span></span><br><span class="line">				<span class="keyword">synchronized</span> (obj1) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;一秒钟后&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;已经锁定obj1&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * obj1</span></span><br><span class="line"><span class="comment"> * obj2</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * A线程</span></span><br><span class="line"><span class="comment"> * run()&#123;</span></span><br><span class="line"><span class="comment"> * 	synchronized(obj1)&#123;</span></span><br><span class="line"><span class="comment"> * 		//代码</span></span><br><span class="line"><span class="comment"> * 		synchronized(obj2)&#123;</span></span><br><span class="line"><span class="comment"> * 			//</span></span><br><span class="line"><span class="comment"> * 		&#125;	</span></span><br><span class="line"><span class="comment"> * 	&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * B线程</span></span><br><span class="line"><span class="comment"> * run()&#123;</span></span><br><span class="line"><span class="comment"> * 	synchronized(obj2)&#123;</span></span><br><span class="line"><span class="comment"> * 		//代码</span></span><br><span class="line"><span class="comment"> * 		synchronized(obj1)&#123;</span></span><br><span class="line"><span class="comment"> * 			//</span></span><br><span class="line"><span class="comment"> * 		&#125;	</span></span><br><span class="line"><span class="comment"> * 	&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//new Thread(new DeadLock(true)).start();</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DeadLock</span>(<span class="literal">false</span>)).start();<span class="comment">//死锁</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DeadLock</span>(<span class="literal">true</span>)).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第八章-线程通信"><a href="#第八章-线程通信" class="headerlink" title="第八章 线程通信"></a>第八章 线程通信</h2><h3 id="第1节-为什么要进行线程通信"><a href="#第1节-为什么要进行线程通信" class="headerlink" title="第1节 为什么要进行线程通信"></a>第1节 为什么要进行线程通信</h3><table>
    <tr>
        <td style="font-size:12px">
            多个线程并发执行时,在默认情况下CPU是随机切换线程的,当我们需要多个线程来共同完成一件任务.并且我们希望他们有规律的执行,那么多线程之间需要一些协调通信
        </td>
    </tr>
</table>

<h3 id="第2节-Java语言实现通信的方式"><a href="#第2节-Java语言实现通信的方式" class="headerlink" title="第2节 Java语言实现通信的方式"></a>第2节 Java语言实现通信的方式</h3><table>
    <tr>
        <td style="font-size:12px">
            java.lang.Object类中提供了wait()/notify/notifyAll()方法实现线程之间的通信;这三个方法必须在synchronized方法或synchronized代码块中才能使用,否则会报java.lang.IllegalMonitorStateException异常
        </td>
    </tr>
</table>


<ul>
<li>wait()方法</li>
</ul>
<table>
    <tr>
        <td style="font-size:12px">
            当前线程挂起并放弃CPU,释放对锁的拥有权(在wait时必须先获取锁,所以wait必须在synchronized中),同时在等待的位置加一个标志,以备后面被唤醒时它好能从标志位置获得锁的拥有权,变成就绪状态.
        </td>
    </tr>
</table>


<ul>
<li>notify()方法</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">唤醒一个等待当前对象的锁的线程</span><br></pre></td></tr></table></figure>

<ul>
<li>notifyAll()方法</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">方法会唤醒在此对象监视器上等待的所有线程</span><br></pre></td></tr></table></figure>

<h3 id="第3节-练习-使用两个线程打印-1-100-线程1-线程2-交替打印"><a href="#第3节-练习-使用两个线程打印-1-100-线程1-线程2-交替打印" class="headerlink" title="第3节 练习(使用两个线程打印 1-100 线程1, 线程2 交替打印)"></a>第3节 练习(使用两个线程打印 1-100 线程1, 线程2 交替打印)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintNum</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">				notify();<span class="comment">//唤醒</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">100</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(num&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+ num);</span><br><span class="line">					num++;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">//等待</span></span><br><span class="line">						wait();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;			</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 创建两个线程,循环1-100</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="type">PrintNum</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintNum</span>();</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第九章-生产着消费者模式"><a href="#第九章-生产着消费者模式" class="headerlink" title="第九章 生产着消费者模式"></a>第九章 生产着消费者模式</h2><ul>
<li>容器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">	<span class="comment">//设置盒子容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> c=<span class="number">0</span>; <span class="comment">//最大值10</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 向盒子中添加对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(c&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;生产产品&quot;</span>+c);</span><br><span class="line">			c++;</span><br><span class="line">			notifyAll();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(c&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;消费产品&quot;</span>+c);</span><br><span class="line">			c--;</span><br><span class="line">			notifyAll();</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pro</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	Box box;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Pro</span><span class="params">(Box box)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.box = box;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;生产开始....&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep((<span class="type">int</span>)Math.random()*<span class="number">1000</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;		</span><br><span class="line">			box.add();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cus</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">	Box box;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Cus</span><span class="params">(Box box)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.box = box;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;消费开始...&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep((<span class="type">int</span>)Math.random()*<span class="number">1000</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;		</span><br><span class="line">			box.get();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建容器	</span></span><br><span class="line">		<span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line">		<span class="comment">//创建生产者</span></span><br><span class="line">		<span class="type">Pro</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pro</span>(box);</span><br><span class="line">  	<span class="comment">//创建消费者</span></span><br><span class="line">		<span class="type">Cus</span> <span class="variable">cus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cus</span>(box);</span><br><span class="line">		<span class="comment">//给生产者分配线程</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Thread</span>(pro).start();</span><br><span class="line">  	<span class="comment">//给消费者分配线程</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Thread</span>(cus).start();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>11-多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>13-反射</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/13_%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-反射的概述"><a href="#第一章-反射的概述" class="headerlink" title="第一章 反射的概述"></a>第一章 反射的概述</h2><span id="more"></span>

<h3 id="第1节-反射的概念"><a href="#第1节-反射的概念" class="headerlink" title="第1节 反射的概念"></a>第1节 反射的概念</h3><table>
    <tr>
        <td style="font-size: 12px;">
            Java的反射机制是指在运行状态中,对于任意一个类都能够知道这个类所有的属性和方法,并且对于任意一个对象,都能够调用它的任意一个方法,这种动态获取信息以及动态调用对象方法的功能称为Java的反射机制.
        </td>
    </tr>
</table>

<h3 id="第2节-反射理解"><a href="#第2节-反射理解" class="headerlink" title="第2节 反射理解"></a>第2节 反射理解</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">如果存在反射,那是不是也存在正射？如果存在正射,那么什么是正射呢？</span><br></pre></td></tr></table></figure>

<ul>
<li>白话正射</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">在编写代码的时,如果使用到了某一个类,首先需要了解这个类是干什么的,然后使用<span class="keyword">new</span>关键字实例化对象.接着对这个对象进行操作,这就是正射.</span><br><span class="line"></span><br><span class="line">Teacher t = <span class="keyword">new</span> <span class="constructor">Teacher()</span>;<span class="comment">//实例化</span></span><br><span class="line">t.<span class="keyword">do</span><span class="constructor">Work(<span class="string">&quot;语文&quot;</span>)</span>;<span class="comment">//调用方法(操作对象)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>白话反射</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">反射就是我们不知道要创建对象的类是什么,自然也就无法使用<span class="keyword">new</span><span class="type"></span>关键字来创建对象,但是我还想创建对象</span><br></pre></td></tr></table></figure>

<ul>
<li>正射和反射的对比</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 下面是使用正射和反射实现的</span></span><br><span class="line"><span class="comment"> * 功能相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//正射</span></span><br><span class="line">      	<span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.doWork(<span class="string">&quot;语文&quot;</span>);</span><br><span class="line">				<span class="comment">//反射</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">obj</span> <span class="operator">=</span> (Teacher) createObject(<span class="string">&quot;cn.ukoko.Teacher&quot;</span>);</span><br><span class="line">        obj.doWork(<span class="string">&quot;数学&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createObject</span><span class="params">(String o)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(o);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String w)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师批改&quot;</span>+w+<span class="string">&quot;作业...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二章-反射常见API"><a href="#第二章-反射常见API" class="headerlink" title="第二章 反射常见API"></a>第二章 反射常见API</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.Class</span>: 描述类的类</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span>: 描述方法的类</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Field</span>: 描述属性的类</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Constructor</span>: 描述构造器的类</span><br></pre></td></tr></table></figure>

<h3 id="第1节-Class类"><a href="#第1节-Class类" class="headerlink" title="第1节 Class类"></a>第1节 Class类</h3><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span>被称为描述类的类,他也是一个类,从这个类中可以获取一个类的描述信息,比如获取类中属性的信息,方法的信息,构造器的信息等.</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">Class</span>类没有构造方法,他的对象只能由系统创建,不能由程序员创建.</span><br><span class="line"><span class="number">2.</span> 一个类在 JVM 中只会有一个<span class="keyword">Class</span>实例</span><br><span class="line"><span class="number">3.</span> 一个<span class="keyword">Class</span>对象对应的是一个加载到JVM中的一个.<span class="keyword">class</span>文件</span><br><span class="line"><span class="number">4.</span> 每个类的实例都会记得自己是由哪个 <span class="keyword">Class</span> 实例所生成</span><br><span class="line"><span class="number">5.</span> 通过<span class="keyword">Class</span>可以完整地得到一个类中的完整结构 </span><br></pre></td></tr></table></figure>

<ul>
<li>Class类的常见方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>static Class  forName(String name)</td>
<td>返回指定类名 name 的 Class 对象</td>
</tr>
<tr>
<td>Object newInstance()</td>
<td>调用缺省构造函数，返回该Class对象的一个实例</td>
</tr>
<tr>
<td>getName()</td>
<td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td>
</tr>
<tr>
<td>Class getSuperClass()</td>
<td>返回当前Class对象的父类的Class对象</td>
</tr>
<tr>
<td>Class [] getInterfaces()</td>
<td>获取当前Class对象的接口</td>
</tr>
<tr>
<td>ClassLoader getClassLoader()</td>
<td>返回该类的类加载器</td>
</tr>
<tr>
<td>Constructor[] getConstructors()</td>
<td>返回所有public修饰的构造方法</td>
</tr>
<tr>
<td>Constructor[] getDeclaredConstructors()</td>
<td>返回所有权限修饰的构造方法</td>
</tr>
<tr>
<td>Field[] getFields()</td>
<td>返回所有的public修饰的属性,包含父类</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回当前类的所有权限的属性(不包括父类)</td>
</tr>
<tr>
<td>Method[] getMethods()</td>
<td>返回所有的public修饰的方法(包括父类)</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods</td>
<td>返回当前类的所有权限的方法(不包括父类)</td>
</tr>
<tr>
<td>Annotation[] getAnnotations()</td>
<td>返回所有注解(包括父类的注解,父类注解使用@Inherited修饰)</td>
</tr>
<tr>
<td>Annotation[] getDeclaredAnnotations()</td>
<td>返回当前类的注解</td>
</tr>
<tr>
<td>Type getGenericSuperclass()</td>
<td>获取父类的泛型类型</td>
</tr>
<tr>
<td>ParameterizedType</td>
<td>ParameterizedType是Type的子类getGenericSuperclass()方法返回的对象是ParameterizedType的实例,所以需要造型(向上强转)</td>
</tr>
<tr>
<td>Type[] getActualTypeArguments()</td>
<td>ParameterizedType中提供了getActualTypeArguments方法,返回泛型类型列表</td>
</tr>
</tbody></table>
<ul>
<li>获取Class类对象的常见3种方式</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 使用 Class.forName 静态方法</span><br><span class="line">  Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">  System.out.println(clazz);//<span class="keyword">class</span> <span class="title class_">java</span>.lang.<span class="built_in">String</span></span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> 使用类的.<span class="keyword">class</span> 方法</span><br><span class="line">	Class&lt;<span class="built_in">String</span>&gt; clazz = <span class="built_in">String</span>.<span class="keyword">class</span>;</span><br><span class="line">  System.out.println(clazz);//<span class="keyword">class</span> <span class="title class_">java</span>.lang.<span class="built_in">String</span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> 使用实例对象的 getClass() 方法</span><br><span class="line">	<span class="built_in">String</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">  Class&lt;? <span class="keyword">extends</span> <span class="built_in">String</span>&gt; clazz = s.getClass();</span><br><span class="line">  System.out.println(clazz);//<span class="keyword">class</span> <span class="title class_">java</span>.lang.<span class="built_in">String</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-Method类"><a href="#第2节-Method类" class="headerlink" title="第2节 Method类"></a>第2节 Method类</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">描述方法的方法</span><br></pre></td></tr></table></figure>

<ul>
<li>Method类的常见方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>int getModifiers()</td>
<td>权限修饰符</td>
</tr>
<tr>
<td>String getName()</td>
<td>方法名</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getParameterTypes()</td>
<td>方法的参数列表类型</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getReturnType()</td>
<td>返回值类型</td>
</tr>
<tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>方法调用</td>
</tr>
</tbody></table>
<h3 id="第3节-Field类"><a href="#第3节-Field类" class="headerlink" title="第3节 Field类"></a>第3节 Field类</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">描述属性的类</span><br></pre></td></tr></table></figure>

<ul>
<li>Field类的常见方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object get(Object obj)</td>
<td>获取指定属性值</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取属性的权限修饰符</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取属性的名称</td>
</tr>
<tr>
<td>void set(Object obj, Object value)</td>
<td>给指定对象的指定属性对象赋值</td>
</tr>
</tbody></table>
<ul>
<li>AccessibleObject的常见方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>setAccessible(boolean flag)</td>
<td>设置权限,比如给私有属性赋值需要开启权限,否则不能赋值</td>
</tr>
</tbody></table>
<h3 id="第4节-Constructor"><a href="#第4节-Constructor" class="headerlink" title="第4节 Constructor"></a>第4节 Constructor</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">描述构造器的类</span><br></pre></td></tr></table></figure>

<ul>
<li>Constructor类的常见方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>int getModifiers()</td>
<td>获取构造方法的权限修饰符</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取构造方法的名称</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getParameterTypes()</td>
<td>方法的参数列表类型</td>
</tr>
<tr>
<td>T newInstance(Object… initargs)</td>
<td>构造方法</td>
</tr>
</tbody></table>
<h3 id="第5节-其他类和方法"><a href="#第5节-其他类和方法" class="headerlink" title="第5节 其他类和方法"></a>第5节 其他类和方法</h3><ul>
<li>ClassLoader类加载器</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">类加载器的功能:把类(class)装载进内存中</span><br><span class="line"><span class="keyword">JVM在运行时会产生3个类加载器</span></span><br><span class="line"><span class="keyword"></span><span class="number">1</span>. 引导类加载器：用C++编写的,是<span class="keyword">JVM自带的类加载器,负责加载Java平台核心类库</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>. 扩展类加载器：负责<span class="keyword">jre/lib/ext目录下的jar包或 </span>–D <span class="keyword">java.ext.dirs </span>指定目录下的<span class="keyword">jar包装入工作库</span></span><br><span class="line"><span class="keyword"></span><span class="number">3</span>. 系统类加载器：负责<span class="keyword">java </span>–classpath 或 –D <span class="keyword">java.class.path所指的目录下的类与jar包装入工作</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类加载的过程</li>
</ul>
<img width="600" src="https://note.youdao.com/yws/api/personal/file/WEB95a3c0f9201b3eec52b7d7276ae98b87?method=download&shareKey=0e0a770998aee214478362848e3ed347">

<ul>
<li>类加载器的获取</li>
</ul>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span>类中提供了获取类加载器的方法,所以要获取一个类的类加载器首先就是获取这个类的<span class="keyword">Class</span>实例,然后调用类加载器方法获取类加载器</span><br></pre></td></tr></table></figure>

<ul>
<li>类加载器中的重要方法</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ClassLoader cl = <span class="module-access"><span class="module"><span class="identifier">TestDemo</span>.</span></span><span class="keyword">class</span>.get<span class="constructor">ClassLoader()</span>;</span><br><span class="line"><span class="comment">//可以获取一个文件的输入流</span></span><br><span class="line">InputStream <span class="keyword">in</span> = cl.get<span class="constructor">ResourceAsStream(<span class="string">&quot;db.properties&quot;</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第三章-动态代理"><a href="#第三章-动态代理" class="headerlink" title="第三章 动态代理"></a>第三章 动态代理</h2><ul>
<li>代理模式的定义</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">代理模式给某一个对象提供一个代理对象,并由代理对象控制对原对象的引用</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 目标代理对象(源对象)</span><br><span class="line"><span class="bullet">2.</span> 代理对象</span><br></pre></td></tr></table></figure>

<ul>
<li><p>静态代理的实现</p>
</li>
<li><ul>
<li>公共接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Boss</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        签字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>IT老板</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标代理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItBoss</span> <span class="keyword">implements</span> <span class="title class_">Boss</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IT老板签字...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>IT秘书</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  代理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Secretary</span> <span class="keyword">implements</span> <span class="title class_">Boss</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        目标代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Secretary</span><span class="params">(Boss boss)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            代理对象方法,调用目标代理对象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        boss.sign();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态代理的局限</p>
</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">静态代理设计,每一个代理类只能代理一个接口,如果在项目中需要对多个接口生成代理,这样程序开发中就会产生过多代理不易维护.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>动态代理的实现</p>
</li>
<li><ul>
<li>JDK动态代理</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">JDK自带的动态代理类java.lang.reflect.Proxy实现动态代理</span><br><span class="line"><span class="section">优点: 简单、方便</span></span><br><span class="line"><span class="section">缺点: 只能代理接口,不能代理类</span></span><br></pre></td></tr></table></figure>

<ul>
<li>CGLIB动态代理</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">开源,功能强大高性能的代码生成库</span><br><span class="line"><span class="section">优点: 可以代理类</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>目标代理类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ITBoss</span> &#123;</span><br><span class="line">	<span class="comment">//签名</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;IT老板签名...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.创建Enhancer对象</span></span><br><span class="line">		<span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">		<span class="comment">//2.指定被代理对象的Class</span></span><br><span class="line">		enhancer.setSuperclass(ITBoss.class);</span><br><span class="line">		<span class="comment">//3.设置方法的拦截以及回调</span></span><br><span class="line">		enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * obj:被代理对象</span></span><br><span class="line"><span class="comment">			 * method:原方法</span></span><br><span class="line"><span class="comment">			 * args:方法入参</span></span><br><span class="line"><span class="comment">			 * methodProxy:代理的方法</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">				<span class="keyword">return</span> methodProxy.invokeSuper(obj, args);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">//创建代理对象</span></span><br><span class="line">		<span class="type">ITBoss</span> <span class="variable">boss</span> <span class="operator">=</span> (ITBoss) enhancer.create();</span><br><span class="line">		System.out.println(boss);<span class="comment">//指向的是代理对象com.hy.ITBoss$$EnhancerByCGLIB$$3e50753c@7506e922</span></span><br><span class="line">		boss.sign();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>13-反射</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>12-网络编程</title>
    <url>/2022/07/27/%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9AJavaSE/12_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">作者: 左岸小镇_梦归</span></span><br><span class="line"><span class="section">企鹅: 2427419219</span></span><br><span class="line"><span class="section">邮箱: publicfinal@163.com</span></span><br><span class="line"><span class="section">博客: https://publicfinal.top/</span></span><br><span class="line"><span class="section">备用: https://publicfinal.gitee.io/</span></span><br></pre></td></tr></table></figure>



<h2 id="第一章-网络编程概述"><a href="#第一章-网络编程概述" class="headerlink" title="第一章 网络编程概述"></a>第一章 网络编程概述</h2><span id="more"></span>

<ul>
<li>网络编程概述</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">Java语言提供了网络的支持,程序员能够很容易的开发常见的网络应用.</span><br><span class="line"></span><br><span class="line">Java提供的类库,可以实现无痛的网络连接,联网的底层细节被隐藏在安装Java本机系统里.由JVM进行控制.并且Java实现了一个跨平台的网络库.</span><br></pre></td></tr></table></figure>

<ul>
<li>网络编程的目的</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">直接或间接地通过网络协议与其它计算机进行通讯,实现资源的共享</span><br></pre></td></tr></table></figure>

<ul>
<li>网络编程中面临的主要问题</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 如何准确地定位网络上一台或多台主机</span><br><span class="line"><span class="bullet">2.</span> 找到主机后如何可靠高效地进行数据传输</span><br></pre></td></tr></table></figure>

<h2 id="第二章-网络通信要素"><a href="#第二章-网络通信要素" class="headerlink" title="第二章 网络通信要素"></a>第二章 网络通信要素</h2><h3 id="第1节-通信双方地址-通信要素1"><a href="#第1节-通信双方地址-通信要素1" class="headerlink" title="第1节 通信双方地址(通信要素1)"></a>第1节 通信双方地址(通信要素1)</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">通讯要素<span class="number">1</span>：<span class="built_in">IP</span>地址 和 端口号</span><br></pre></td></tr></table></figure>

<ul>
<li>IP地址</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Java语言提供了InetAddress类用来描述主机信息(IP地址和域名)</span><br><span class="line">IP地址：标识Internet上的计算机 比如百度服务器的IP地址 <span class="number">220.181</span>.<span class="number">38.251</span> </span><br><span class="line">域名： 计算机的定位标识,由于IP地址不方便记忆,所以可以通过域名映射IP地址,理论上和IP同等功效.</span><br><span class="line"></span><br><span class="line">为了标识自己本地主机所以计算机为每一个自己的主机也设置了IP地址和域名(<span class="number">127.0</span>.<span class="number">0.1</span>和localhost),称之为回环地址.</span><br><span class="line"></span><br><span class="line">InetAddress: 表示互联网协议 (IP) 地址,有两个典型子类<span class="constructor">Inet4Address(IPv4地址)</span>和<span class="constructor">Inet6Address(IPv6地址)</span></span><br><span class="line"></span><br><span class="line">常见方法:</span><br><span class="line"><span class="comment">//通过主机名获取主机的InetAddress对象</span></span><br><span class="line">InetAddress ia = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">ByName(<span class="string">&quot;baidu.com&quot;</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ia);<span class="comment">//baidu.com/220.181.38.251</span></span><br><span class="line"><span class="comment">//获取主机地址</span></span><br><span class="line">String address = ia.get<span class="constructor">HostAddress()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(address);<span class="comment">//220.181.38.251</span></span><br><span class="line"><span class="comment">//获取主机名称</span></span><br><span class="line">String name = ia.get<span class="constructor">HostName()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name);<span class="comment">//baidu.com</span></span><br></pre></td></tr></table></figure>

<ul>
<li>端口号</li>
</ul>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">标识正在计算机上运行的进程<span class="comment">;</span></span><br><span class="line">同的进程有不同的端口号<span class="comment">;</span></span><br><span class="line">计算机的端口号被规定为一个<span class="number">16</span>位的整数,取值范围为<span class="number">0~65535</span>个.<span class="number">0</span>~<span class="number">1023</span>被服务器占用,我们在编写网络应用时应该使用<span class="number">1024~65535</span>端口号,以免发生端口冲突.</span><br></pre></td></tr></table></figure>

<ul>
<li>端口号和IP地址组合</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">端口号与<span class="built_in">IP</span>地址的组合得出一个网络套接字.</span><br></pre></td></tr></table></figure>

<h3 id="第2节-通信规则-通信要素2"><a href="#第2节-通信规则-通信要素2" class="headerlink" title="第2节 通信规则(通信要素2)"></a>第2节 通信规则(通信要素2)</h3><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">计算机网络中实现通信必须有一些约定,即通信协议.对传输频率,数据格式,传输步骤,出错控制等设计的标准.</span><br></pre></td></tr></table></figure>

<ul>
<li>网络通信协议模型</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">OSI</span>参考模型: 模型过于理想化,未能在因特网上进行广泛推广。</span><br><span class="line"><span class="symbol">TCP</span>/<span class="built_in">IP</span>参考模型(TCP/<span class="built_in">IP</span>协议): 事实上的国际标准。</span><br></pre></td></tr></table></figure>

<ul>
<li>协议模型差异化</li>
</ul>
<table>
    <tr>
        <td>OSI参考模型</td>
        <td>TCP/IP参考模型</td>
        <td>TCP/IP参考模型各层对应协议</td>
    </tr>
    <tr>
        <td>应用层</td>
        <td rowspan="3" style="text-align: center;"> 应用层 </td>
        <td rowspan="3" style="text-align: center;">
            HTTP、ftp、telnet、DNS…
        </td>
    </tr>
    <tr>
        <td>表示层</td>
    </tr>
    <tr>
        <td>会话层</td>
    </tr>
    <tr>
        <td>传输层</td>
        <td>传输层</td>
        <td>TCP、UDP、…</td>
    </tr>
    <tr>
        <td>网络层</td>
        <td>网络层</td>
        <td>IP、ICMP、ARP…</td>
    </tr>
    <tr>
        <td>数据链路层</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>物理层</td>
        <td>物理+数据链路层</td>
        <td>Link</td>
    </tr>
</table>


<ul>
<li>数据封装和数据拆分</li>
</ul>
<img width="500" src="https://note.youdao.com/yws/api/personal/file/WEB5b2b711c3e162c579ea715bf130f58cd?method=download&shareKey=7ba55a5c936cd74a46dfdd117e2ceef4">

<ul>
<li>TCP&#x2F;IP协议簇</li>
</ul>
<table>
    <tr>
        <td style="font-size: 12px">
            TCP/IP协议簇是Internet的基础,也是当今最流行的组网形式.TCP/IP是一组协议的代名词,包括许多别的协议,组成了TCP/IP协议簇.其中比较重要的有PPP协议、IP协议、TCP协议、UDP协议、FTP协议、DNS协议、SMTP协议等
        </td>
    </tr>
</table>


<h2 id="第三章-TCP网络通信"><a href="#第三章-TCP网络通信" class="headerlink" title="第三章 TCP网络通信"></a>第三章 TCP网络通信</h2><h3 id="第1节-TCP介绍"><a href="#第1节-TCP介绍" class="headerlink" title="第1节 TCP介绍"></a>第1节 TCP介绍</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 使用TCP协议前,须先建立TCP连接,形成传输数据通道</span><br><span class="line"><span class="bullet">2.</span> 传输前,采用&quot;三次握手&quot;方式,是可靠的</span><br><span class="line"><span class="bullet">3.</span> TCP协议进行通信的两个应用进程:客户端、服务端</span><br><span class="line"><span class="bullet">4.</span> 在连接中可进行大数据量的传输</span><br><span class="line"><span class="bullet">5.</span> 传输完毕,需释放已建立的连接,效率低(释放连接需要四次挥手)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>三次握手建立TCP连接通道</p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">第<span class="number">1</span>次 客户端向服务器端发送数据,服务器端收到了,然后服务器端返回给客户端一个信息</span><br><span class="line">第<span class="number">2</span>次 客户端接收到服务器端返回的消息(到这里可以知道服务器端可以正确接收和处理客户端消息消息)</span><br><span class="line">第<span class="number">3</span>次 客户端接收到服务器端返回来的消息之后,告诉服务器端我已经接收到了你响应给我的消息.</span><br><span class="line"></span><br><span class="line">以上三步完成之后才能证明服务器端和客户端都可以正确接收和处理消息.如果只有<span class="number">1</span>、<span class="number">2</span>步只能证明服务器端正常不能证明客户端正常.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>四次挥手释放TCP连接通道</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">第1次 客户端和服务器端说我要关闭连接了</span><br><span class="line">第2次 服务器端说可以,但是你等我一会,我把剩余的任务做完</span><br><span class="line">第3次 服务器端做完收尾工作之后和客户端说,我这边结束了,你可以关了</span><br><span class="line">第4次 客户端说OK,我关了</span><br></pre></td></tr></table></figure>

<h3 id="第2节-Socket介绍"><a href="#第2节-Socket介绍" class="headerlink" title="第2节 Socket介绍"></a>第2节 Socket介绍</h3><ul>
<li>Socket介绍</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 利用套接字(Socket)开发网络应用程序早已被广泛的采用,以至于成为事实上的标准</span><br><span class="line"><span class="bullet">2.</span> 通信的两端都要有Socket,是两台机器间通信的端点</span><br><span class="line"><span class="bullet">3.</span> 网络通信其实就是Socket间的通信</span><br><span class="line"><span class="bullet">4.</span> Socket允许程序把网络连接当成一个流,数据在两个Socket间通过IO传输</span><br><span class="line"><span class="bullet">5.</span> 一般主动发起通信的应用程序属客户端,等待通信请求的为服务端</span><br></pre></td></tr></table></figure>

<ul>
<li>Socket类</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>void close()</td>
<td>关闭Socket,不可在以后的网络连接中使用,除非创建新的套接字</td>
</tr>
<tr>
<td>InputStream getInputStream()</td>
<td>获取与Socket相关联的字节输入流,用于从Socket中读数据</td>
</tr>
<tr>
<td>OutputStream getOutputStream()</td>
<td>获取与Socket相关联的字节输出流,用于向Socket中写数据</td>
</tr>
</tbody></table>
<ul>
<li>ServerSocket类</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Socket accept()</td>
<td>等待客户端的连接请求,返回与该客户端进行通信用的Socket对象</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭监听Socket</td>
</tr>
</tbody></table>
<h3 id="第3节-基于Socket编程实现cs-client-server"><a href="#第3节-基于Socket编程实现cs-client-server" class="headerlink" title="第3节 基于Socket编程实现cs(client-server)"></a>第3节 基于Socket编程实现cs(client-server)</h3><ul>
<li>案例一(实现客户端向服务器端发送一段数据)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器端套接字</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端已启动,等待客户端连接....&quot;</span>);</span><br><span class="line">        <span class="comment">//获取服务器端套接字,并监听,等待客户端发送数据</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="comment">//如果客户端发送过来了数据,获取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buff);</span><br><span class="line">        System.out.println(<span class="string">&quot;接受客户端发送的数据为:&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(buff,<span class="number">0</span>,len));</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建客户端套接字</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="comment">//获取套接字输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//向通道中写入数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Hello Socket&quot;</span>;</span><br><span class="line">        out.write(msg.getBytes());</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例二(实现双向数据)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端已启动,等待客户端连接....&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buff);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是服务器端--&gt;接收客户端数据为:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buff,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;给客户端返回消息开始...&quot;</span>);</span><br><span class="line">        <span class="comment">//给客户端响应一个接收成功的消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;服务器端接收数据成功&quot;</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(msg.getBytes());</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//发送的消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;我是客户端消息&quot;</span>;</span><br><span class="line">        out.write(msg.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收服务器端数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buff);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是客户端--&gt;接收服务器端数据为:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buff,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例三(客户端给服务器端发送一张图片,服务器端将图片保存到本地,并且告诉客户端数据上传成功)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端已启动,等待客户端连接....&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端已启动,客户端连接成功....&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">512</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功,接收来自客户端数据开始....&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;pic.png&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>((len=in.read(buff))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        	fout.write(buff, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功,接收来自客户端数据完成....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;给客户端返回消息开始...&quot;</span>);</span><br><span class="line">        <span class="comment">//给客户端响应一个接收成功的消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;服务器端接收数据成功&quot;</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(msg.getBytes());;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        out.close();</span><br><span class="line">        fout.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//读取本地文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/hushuang/Downloads/wangluobaincheng.png&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] fbuff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="type">int</span> flen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((flen=fin.read(fbuff))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        	out.write(fbuff, <span class="number">0</span>, flen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据发送完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接收服务器端数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buff);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是客户端--&gt;接收服务器端数据为:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buff,<span class="number">0</span>,len));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        in.close();</span><br><span class="line">        fin.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四章-UDP网络通信"><a href="#第四章-UDP网络通信" class="headerlink" title="第四章 UDP网络通信"></a>第四章 UDP网络通信</h2><h3 id="第1节-UDP介绍"><a href="#第1节-UDP介绍" class="headerlink" title="第1节 UDP介绍"></a>第1节 UDP介绍</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">类DatagramSocket和DatagramPacket实现了基于UDP协议网络程序</span><br><span class="line"><span class="symbol">UDP</span>数据报通过数据报套接字DatagramSocket发送和接收</span><br><span class="line">系统不保证UDP数据报一定能够安全送到目的地,也不能确定什么时候可以抵达</span><br><span class="line"><span class="symbol">DatagramPacket</span>对象封装了UDP数据报,在数据报中包含了发送端的<span class="built_in">IP</span>地址和端口号以及接收端的<span class="built_in">IP</span>地址和端口号</span><br><span class="line"><span class="symbol">UDP</span>协议中每个数据报都给出了完整的地址信息,因此无须建立发送方和接收方的连接</span><br></pre></td></tr></table></figure>

<h3 id="第2节-UDP实现"><a href="#第2节-UDP实现" class="headerlink" title="第2节 UDP实现"></a>第2节 UDP实现</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">运行流程:</span><br><span class="line"><span class="bullet">1.</span> DatagramSocket与DatagramPacket</span><br><span class="line"><span class="bullet">2.</span> 建立发送端,接收端</span><br><span class="line"><span class="bullet">3.</span> 建立数据包</span><br><span class="line"><span class="bullet">4.</span> 调用Socket的发送、接收方法</span><br><span class="line"><span class="bullet">5.</span> 关闭Socket</span><br><span class="line"></span><br><span class="line">发送端与接收端是两个独立的运行程序</span><br></pre></td></tr></table></figure>

<ul>
<li>发送端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">		<span class="type">byte</span>[] bs = <span class="string">&quot;Hello UDP&quot;</span>.getBytes();</span><br><span class="line">		<span class="comment">//封装数据报</span></span><br><span class="line">		<span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bs,<span class="number">0</span>,bs.length,InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">10000</span>);</span><br><span class="line">		<span class="comment">//发送</span></span><br><span class="line">		ds.send(dp);</span><br><span class="line">		ds.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接收端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receive</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);</span><br><span class="line">		<span class="type">byte</span>[] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by,by.length);</span><br><span class="line">		<span class="comment">//接收</span></span><br><span class="line">		ds.receive(dp);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(),<span class="number">0</span>,dp.getLength());</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		ds.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第五章-URL编程"><a href="#第五章-URL编程" class="headerlink" title="第五章 URL编程"></a>第五章 URL编程</h2><h3 id="第1节-URL概述"><a href="#第1节-URL概述" class="headerlink" title="第1节 URL概述"></a>第1节 URL概述</h3><ul>
<li>URL介绍</li>
</ul>
<table>
    <tr>
        <td style="font-size: 12px;">
            URL(Uniform Resource Locator):统一资源定位符,它表示 Internet 上某一资源的地址.通过URL我们可以访问 Internet 上的各种网络资源,比如最常见的 www,ftp 站点.浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源
        </td>
    </tr>
</table>

<ul>
<li>URL组成</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">URL的基本结构由<span class="number">5</span>部分组成</span><br><span class="line"></span><br><span class="line">&lt;传输协议&gt;:<span class="regexp">//</span>&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;</span><br><span class="line">例如: http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">8080</span><span class="regexp">/taobao/i</span>ndex.html</span><br></pre></td></tr></table></figure>


<h3 id="第2节-URL常见API"><a href="#第2节-URL常见API" class="headerlink" title="第2节 URL常见API"></a>第2节 URL常见API</h3><ul>
<li>构造方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>URL(String spec)</td>
<td>根据 String 表示形式创建 URL 对象;spec:域名</td>
</tr>
</tbody></table>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">URL url <span class="operator">=</span> new URL (<span class="string">&quot;http://www.baidu.com/index.html&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常见方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>getProtocol()</td>
<td>获取此URL 的协议名称</td>
</tr>
<tr>
<td>getHost()</td>
<td>获取该URL的主机名</td>
</tr>
<tr>
<td>getPort()</td>
<td>获取该URL的端口号</td>
</tr>
<tr>
<td>getPath()</td>
<td>获取该URL的文件路径</td>
</tr>
<tr>
<td>getFile()</td>
<td>获取该URL的文件名</td>
</tr>
<tr>
<td>getRef()</td>
<td>获取该URL在文件中的相对位置</td>
</tr>
<tr>
<td>getQuery()</td>
<td>获取该URL的查询名</td>
</tr>
</tbody></table>
<ul>
<li>案例一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.petking.cn%2Fupload%2F20200505%2Fe8120b1111d8badc952a035d0b927b8c.jpg&amp;refer=http%3A%2F%2Fwww.petking.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1638798637&amp;t=7b6aa84c4d3ad92708d4ced882a5d976&quot;</span>);</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> url.openStream();</span><br><span class="line">		<span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/hushuang/Downloads/123.jpg&quot;</span>);</span><br><span class="line">		<span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len=in.read(buff))!=-<span class="number">1</span>) &#123;</span><br><span class="line">			out.write(buff, <span class="number">0</span>, len);</span><br><span class="line">		&#125;</span><br><span class="line">		out.close();</span><br><span class="line">		in.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java后端</category>
        <category>阶段一：JavaSE</category>
        <category>12-网络编程</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>UDP</tag>
        <tag>Socket</tag>
        <tag>URL</tag>
      </tags>
  </entry>
</search>
